mkdir -p build/rtl
Mon, 20 May 2024 16:52:43 +0800
time -a -o ./build/time.log mill -i xiangshan[chisel].test.runMain top.SimTop    \
	-td build/rtl --config MinimalConfig --firtool-opt "--repl-seq-mem --repl-seq-mem-file=SimTop.v.conf"                          \
	--num-cores 1 --dump-fir --target verilog --firtool-opt "-O=release --disable-annotation-unknown --lowering-options=explicitBitcast,disallowLocalVariables,disallowPortDeclSharing,locationInfoStyle=none" --enable-difftest --full-stacktrace
FPGASoC cores: 1 banks: 1 block size: 64 bus size: 256
[BackendParams] wbType: INT(-1), rdType: IntRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List(IntRD(0,0), IntRD(1,0), IntRD(10,0), IntRD(3,1))
[BackendParams] wb port 5 rdcfgs: List(IntRD(12,0))
[BackendParams] wb port 1 rdcfgs: List(IntRD(2,0), IntRD(3,0))
[BackendParams] wb port 6 rdcfgs: List(IntRD(13,0))
[BackendParams] wb port 2 rdcfgs: List(IntRD(4,0), IntRD(5,0), IntRD(9,0), IntRD(5,1))
[BackendParams] wb port 7 rdcfgs: List(IntRD(14,0))
[BackendParams] wb port 3 rdcfgs: List(IntRD(6,0), IntRD(7,0))
[BackendParams] wb port 4 rdcfgs: List(IntRD(8,0), IntRD(7,1), IntRD(11,0), IntRD(1,1))
[BackendParams] wbType: INT(-1), rdType: FpRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List(FpRD(0,0), FpRD(1,0), FpRD(5,0), FpRD(6,0))
[BackendParams] wb port 5 rdcfgs: List()
[BackendParams] wb port 1 rdcfgs: List()
[BackendParams] wb port 6 rdcfgs: List()
[BackendParams] wb port 2 rdcfgs: List()
[BackendParams] wb port 7 rdcfgs: List()
[BackendParams] wb port 3 rdcfgs: List()
[BackendParams] wb port 4 rdcfgs: List()
[BackendParams] wbType: INT(-1), rdType: VfRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List()
[BackendParams] wb port 5 rdcfgs: List()
[BackendParams] wb port 1 rdcfgs: List()
[BackendParams] wb port 6 rdcfgs: List()
[BackendParams] wb port 2 rdcfgs: List(VfRD(5,0), VfRD(6,0), VfRD(7,0), VfRD(8,0), VfRD(9,0))
[BackendParams] wb port 7 rdcfgs: List()
[BackendParams] wb port 3 rdcfgs: List(VfRD(3,1), VfRD(4,1), VfRD(0,1), VfRD(1,1), VfRD(2,1))
[BackendParams] wb port 4 rdcfgs: List()
[BackendParams] wbType: FP(-1), rdType: IntRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List()
[BackendParams] wb port 5 rdcfgs: List(IntRD(12,0))
[BackendParams] wb port 1 rdcfgs: List()
[BackendParams] wb port 6 rdcfgs: List(IntRD(13,0))
[BackendParams] wb port 2 rdcfgs: List()
[BackendParams] wb port 7 rdcfgs: List(IntRD(14,0))
[BackendParams] wb port 3 rdcfgs: List()
[BackendParams] wb port 4 rdcfgs: List(IntRD(10,0), IntRD(3,1))
[BackendParams] wbType: FP(-1), rdType: FpRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List(FpRD(0,0), FpRD(1,0))
[BackendParams] wb port 5 rdcfgs: List(FpRD(12,0), FpRD(13,0))
[BackendParams] wb port 1 rdcfgs: List(FpRD(2,0), FpRD(3,0), FpRD(4,0))
[BackendParams] wb port 6 rdcfgs: List()
[BackendParams] wb port 2 rdcfgs: List(FpRD(5,0), FpRD(6,0))
[BackendParams] wb port 7 rdcfgs: List()
[BackendParams] wb port 3 rdcfgs: List(FpRD(7,0), FpRD(8,0), FpRD(9,0))
[BackendParams] wb port 4 rdcfgs: List(FpRD(10,0), FpRD(11,0))
[BackendParams] wbType: FP(-1), rdType: VfRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List()
[BackendParams] wb port 5 rdcfgs: List()
[BackendParams] wb port 1 rdcfgs: List()
[BackendParams] wb port 6 rdcfgs: List()
[BackendParams] wb port 2 rdcfgs: List()
[BackendParams] wb port 7 rdcfgs: List()
[BackendParams] wb port 3 rdcfgs: List()
[BackendParams] wb port 4 rdcfgs: List()
[BackendParams] wbType: VF(-1), rdType: IntRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List()
[BackendParams] wb port 5 rdcfgs: List(IntRD(10,0), IntRD(3,1))
[BackendParams] wb port 1 rdcfgs: List()
[BackendParams] wb port 6 rdcfgs: List()
[BackendParams] wb port 2 rdcfgs: List()
[BackendParams] wb port 7 rdcfgs: List()
[BackendParams] wb port 3 rdcfgs: List()
[BackendParams] wb port 4 rdcfgs: List()
[BackendParams] wbType: VF(-1), rdType: FpRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List()
[BackendParams] wb port 5 rdcfgs: List()
[BackendParams] wb port 1 rdcfgs: List(FpRD(0,0), FpRD(1,0))
[BackendParams] wb port 6 rdcfgs: List()
[BackendParams] wb port 2 rdcfgs: List()
[BackendParams] wb port 7 rdcfgs: List()
[BackendParams] wb port 3 rdcfgs: List()
[BackendParams] wb port 4 rdcfgs: List()
[BackendParams] wbType: VF(-1), rdType: VfRD(-1,2147483647)
[BackendParams] wb port 0 rdcfgs: List(VfRD(10,0), VfRD(11,0), VfRD(12,0), VfRD(13,0), VfRD(14,0))
[BackendParams] wb port 5 rdcfgs: List(VfRD(5,0), VfRD(6,0), VfRD(7,0), VfRD(8,0), VfRD(9,0))
[BackendParams] wb port 1 rdcfgs: List()
[BackendParams] wb port 6 rdcfgs: List(VfRD(7,1), VfRD(8,1), VfRD(9,1), VfRD(5,1), VfRD(6,1))
[BackendParams] wb port 2 rdcfgs: List(VfRD(3,2), VfRD(4,2), VfRD(0,2), VfRD(1,2), VfRD(2,2))
[BackendParams] wb port 7 rdcfgs: List(VfRD(3,1), VfRD(4,1), VfRD(0,1), VfRD(1,1), VfRD(2,1))
[BackendParams] wb port 3 rdcfgs: List(VfRD(8,2), VfRD(9,2), VfRD(5,2), VfRD(6,2), VfRD(7,2))
[BackendParams] wb port 4 rdcfgs: List(VfRD(0,0), VfRD(1,0), VfRD(2,0), VfRD(3,0), VfRD(4,0))
List(WakeUp(ALU0->ALU0), WakeUp(ALU0->BJU0), WakeUp(ALU0->ALU1), WakeUp(ALU0->BJU1), WakeUp(ALU0->ALU2), WakeUp(ALU0->BJU2), WakeUp(ALU0->ALU3), WakeUp(ALU0->BJU3), WakeUp(ALU0->LDU0), WakeUp(ALU0->LDU1), WakeUp(ALU0->LDU2), WakeUp(ALU0->STA0), WakeUp(ALU0->STA1), WakeUp(ALU0->STD0), WakeUp(ALU0->STD1), WakeUp(ALU1->ALU0), WakeUp(ALU1->BJU0), WakeUp(ALU1->ALU1), WakeUp(ALU1->BJU1), WakeUp(ALU1->ALU2), WakeUp(ALU1->BJU2), WakeUp(ALU1->ALU3), WakeUp(ALU1->BJU3), WakeUp(ALU1->LDU0), WakeUp(ALU1->LDU1), WakeUp(ALU1->LDU2), WakeUp(ALU1->STA0), WakeUp(ALU1->STA1), WakeUp(ALU1->STD0), WakeUp(ALU1->STD1), WakeUp(ALU2->ALU0), WakeUp(ALU2->BJU0), WakeUp(ALU2->ALU1), WakeUp(ALU2->BJU1), WakeUp(ALU2->ALU2), WakeUp(ALU2->BJU2), WakeUp(ALU2->ALU3), WakeUp(ALU2->BJU3), WakeUp(ALU2->LDU0), WakeUp(ALU2->LDU1), WakeUp(ALU2->LDU2), WakeUp(ALU2->STA0), WakeUp(ALU2->STA1), WakeUp(ALU2->STD0), WakeUp(ALU2->STD1), WakeUp(ALU3->ALU0), WakeUp(ALU3->BJU0), WakeUp(ALU3->ALU1), WakeUp(ALU3->BJU1), WakeUp(ALU3->ALU2), WakeUp(ALU3->BJU2), WakeUp(ALU3->ALU3), WakeUp(ALU3->BJU3), WakeUp(ALU3->LDU0), WakeUp(ALU3->LDU1), WakeUp(ALU3->LDU2), WakeUp(ALU3->STA0), WakeUp(ALU3->STA1), WakeUp(ALU3->STD0), WakeUp(ALU3->STD1), WakeUp(LDU0->ALU0), WakeUp(LDU0->BJU0), WakeUp(LDU0->ALU1), WakeUp(LDU0->BJU1), WakeUp(LDU0->ALU2), WakeUp(LDU0->BJU2), WakeUp(LDU0->ALU3), WakeUp(LDU0->BJU3), WakeUp(LDU0->LDU0), WakeUp(LDU0->LDU1), WakeUp(LDU0->LDU2), WakeUp(LDU0->STA0), WakeUp(LDU0->STA1), WakeUp(LDU0->STD0), WakeUp(LDU0->STD1), WakeUp(LDU1->ALU0), WakeUp(LDU1->BJU0), WakeUp(LDU1->ALU1), WakeUp(LDU1->BJU1), WakeUp(LDU1->ALU2), WakeUp(LDU1->BJU2), WakeUp(LDU1->ALU3), WakeUp(LDU1->BJU3), WakeUp(LDU1->LDU0), WakeUp(LDU1->LDU1), WakeUp(LDU1->LDU2), WakeUp(LDU1->STA0), WakeUp(LDU1->STA1), WakeUp(LDU1->STD0), WakeUp(LDU1->STD1), WakeUp(LDU2->ALU0), WakeUp(LDU2->BJU0), WakeUp(LDU2->ALU1), WakeUp(LDU2->BJU1), WakeUp(LDU2->ALU2), WakeUp(LDU2->BJU2), WakeUp(LDU2->ALU3), WakeUp(LDU2->BJU3), WakeUp(LDU2->LDU0), WakeUp(LDU2->LDU1), WakeUp(LDU2->LDU2), WakeUp(LDU2->STA0), WakeUp(LDU2->STA1), WakeUp(LDU2->STD0), WakeUp(LDU2->STD1), WakeUp(FEX0->FEX0), WakeUp(FEX0->FEX1), WakeUp(FEX0->FEX2), WakeUp(FEX0->FEX3), WakeUp(FEX0->FEX4), WakeUp(FEX0->FEX5), WakeUp(FEX1->FEX0), WakeUp(FEX1->FEX1), WakeUp(FEX1->FEX2), WakeUp(FEX1->FEX3), WakeUp(FEX1->FEX4), WakeUp(FEX1->FEX5), WakeUp(FEX2->FEX0), WakeUp(FEX2->FEX1), WakeUp(FEX2->FEX2), WakeUp(FEX2->FEX3), WakeUp(FEX2->FEX4), WakeUp(FEX2->FEX5), WakeUp(FEX3->FEX0), WakeUp(FEX3->FEX1), WakeUp(FEX3->FEX2), WakeUp(FEX3->FEX3), WakeUp(FEX3->FEX4), WakeUp(FEX3->FEX5), WakeUp(LDU0->FEX0), WakeUp(LDU0->FEX1), WakeUp(LDU0->FEX2), WakeUp(LDU0->FEX3), WakeUp(LDU0->FEX4), WakeUp(LDU0->FEX5), WakeUp(LDU1->FEX0), WakeUp(LDU1->FEX1), WakeUp(LDU1->FEX2), WakeUp(LDU1->FEX3), WakeUp(LDU1->FEX4), WakeUp(LDU1->FEX5), WakeUp(LDU2->FEX0), WakeUp(LDU2->FEX1), WakeUp(LDU2->FEX2), WakeUp(LDU2->FEX3), WakeUp(LDU2->FEX4), WakeUp(LDU2->FEX5), WakeUp(FEX0->STD0), WakeUp(FEX0->STD1), WakeUp(FEX1->STD0), WakeUp(FEX1->STD1), WakeUp(FEX2->STD0), WakeUp(FEX2->STD1), WakeUp(FEX3->STD0), WakeUp(FEX3->STD1), WakeUp(VFEX0->VFEX0), WakeUp(VFEX0->VFEX1), WakeUp(VFEX0->VFEX2), WakeUp(VFEX0->VFEX3), WakeUp(VFEX0->VFEX4), WakeUp(VFEX0->VFEX5), WakeUp(VFEX1->VFEX0), WakeUp(VFEX1->VFEX1), WakeUp(VFEX1->VFEX2), WakeUp(VFEX1->VFEX3), WakeUp(VFEX1->VFEX4), WakeUp(VFEX1->VFEX5), WakeUp(VFEX2->VFEX0), WakeUp(VFEX2->VFEX1), WakeUp(VFEX2->VFEX2), WakeUp(VFEX2->VFEX3), WakeUp(VFEX2->VFEX4), WakeUp(VFEX2->VFEX5), WakeUp(VFEX3->VFEX0), WakeUp(VFEX3->VFEX1), WakeUp(VFEX3->VFEX2), WakeUp(VFEX3->VFEX3), WakeUp(VFEX3->VFEX4), WakeUp(VFEX3->VFEX5))
[Backend] ExuConfigs:
[Backend]   ALU0: fu(s): {alu,mul,bku}, wb: {INT(0)}, imm: {I,U,LUI32}, latMax(2), lat: {0,2}, srcReg(2)
[Backend]   BJU0: fu(s): {brh,jmp}, wb: {INT(4)}, imm: {SB,I,UJ,U}, latMax(0), lat: {0}, srcReg(2)
[Backend]   ALU1: fu(s): {alu,mul,bku}, wb: {INT(1)}, imm: {I,U,LUI32}, latMax(2), lat: {0,2}, srcReg(2)
[Backend]   BJU1: fu(s): {brh,jmp}, wb: {INT(2)}, imm: {SB,I,UJ,U}, latMax(0), lat: {0}, srcReg(2)
[Backend]   ALU2: fu(s): {alu}, wb: {INT(2)}, imm: {I,U,LUI32}, latMax(0), lat: {0}, srcReg(2)
[Backend]   BJU2: fu(s): {brh,jmp,i2f,vsetriwi,vsetriwvf,csr,fence,i2v}, wb: {INT(0),FP(4),VF(5)}, imm: {VIU,SB,U,VSETVLI,UJ,I,VSETIVLI,VIS}, latMax(2), lat: {0,2}, srcReg(2)
[Backend]   ALU3: fu(s): {alu}, wb: {INT(3)}, imm: {I,U,LUI32}, latMax(0), lat: {0}, srcReg(2)
[Backend]   BJU3: fu(s): {div}, wb: {INT(4)}, imm: {}, latMax(0), lat: {}, srcReg(2)
[Backend]   FEX0: fu(s): {falu,fcvt,f2v}, wb: {FP(0),INT(0),VF(1)}, imm: {}, latMax(3), lat: {2,3,1}, srcReg(2)
[Backend]   FEX1: fu(s): {fmac}, wb: {FP(1)}, imm: {}, latMax(3), lat: {3}, srcReg(3)
[Backend]   FEX2: fu(s): {falu}, wb: {FP(2),INT(0)}, imm: {}, latMax(1), lat: {1}, srcReg(2)
[Backend]   FEX3: fu(s): {fmac}, wb: {FP(3)}, imm: {}, latMax(3), lat: {3}, srcReg(3)
[Backend]   FEX4: fu(s): {fdiv}, wb: {FP(4)}, imm: {}, latMax(0), lat: {}, srcReg(2)
[Backend]   FEX5: fu(s): {fdiv}, wb: {FP(5)}, imm: {}, latMax(0), lat: {}, srcReg(2)
[Backend]   VFEX0: fu(s): {vfma,vialuFix,vimac,vppu}, wb: {VF(4)}, imm: {VIU,VRORVI,VIS}, latMax(4), lat: {4,2,3}, srcReg(5)
[Backend]   VFEX1: fu(s): {vfalu,vfcvt,vipu,vsetrvfwvf}, wb: {VF(5),INT(2)}, imm: {VSETVLI,VSETIVLI}, latMax(3), lat: {2,3,1}, srcReg(5)
[Backend]   VFEX2: fu(s): {vfma,vialuFix}, wb: {VF(6)}, imm: {VIU,VIS,VRORVI}, latMax(4), lat: {4,2}, srcReg(5)
[Backend]   VFEX3: fu(s): {vfalu,vfcvt}, wb: {VF(7),INT(3)}, imm: {}, latMax(3), lat: {2,3}, srcReg(5)
[Backend]   VFEX4: fu(s): {vfdiv,vidiv}, wb: {VF(2)}, imm: {}, latMax(0), lat: {}, srcReg(5)
[Backend]   VFEX5: fu(s): {vfdiv,vidiv}, wb: {VF(3)}, imm: {}, latMax(0), lat: {}, srcReg(5)
[Backend]   STA0: fu(s): {sta,mou}, wb: {??(-1)}, imm: {S}, latMax(0), lat: {}, srcReg(1)
[Backend]   STA1: fu(s): {sta,mou}, wb: {??(-1)}, imm: {S}, latMax(0), lat: {}, srcReg(1)
[Backend]   LDU0: LdExuIdx(0)fu(s): {ldu}, wb: {INT(5),FP(5)}, imm: {I}, latMax(3), lat: {3}, srcReg(1)
[Backend]   LDU1: LdExuIdx(1)fu(s): {ldu}, wb: {INT(6),FP(6)}, imm: {I}, latMax(3), lat: {3}, srcReg(1)
[Backend]   LDU2: LdExuIdx(2)fu(s): {ldu}, wb: {INT(7),FP(7)}, imm: {I}, latMax(3), lat: {3}, srcReg(1)
[Backend]   VLSU0: fu(s): {vldu,vstu}, wb: {VF(0)}, imm: {}, latMax(0), lat: {}, srcReg(5)
[Backend]   STD0: fu(s): {std,moud}, wb: {}, imm: {}, latMax(0), lat: {0}, srcReg(1)
[Backend]   STD1: fu(s): {std,moud}, wb: {}, imm: {}, latMax(0), lat: {0}, srcReg(1)
[Backend] all fu configs
[Backend]   jmp: latency(CertainLatency(0,0))src(List(List(int)))
[Backend]   brh: latency(CertainLatency(0,0))src(List(List(int, int)))
[Backend]   i2f: latency(CertainLatency(2,0))src(List(List(int)))
[Backend]   i2v: latency(CertainLatency(0,0))src(List(List(int, int)))
[Backend]   f2v: latency(CertainLatency(0,0))src(List(List(fp, fp), List(fp)))
[Backend]   csr: latency(CertainLatency(0,0))src(List(List(int)))
[Backend]   alu: latency(CertainLatency(0,0))src(List(List(int, int)))
[Backend]   mul: latency(CertainLatency(2,0))src(List(List(int, int)))
[Backend]   div: latency(UncertainLatency(None))src(List(List(int, int)))
[Backend]   fence: latency(CertainLatency(0,0))src(List(List(int, int)))
[Backend]   bku: latency(CertainLatency(2,0))src(List(List(int, int)))
[Backend]   vsetrvfwvf: latency(CertainLatency(0,0))src(List(List(vec, vec)))
[Backend]   vsetriwvf: latency(CertainLatency(0,0))src(List(List(int, int)))
[Backend]   vsetriwi: latency(CertainLatency(0,0))src(List(List(int, int)))
[Backend]   ldu: latency(UncertainLatency(Some(3)))src(List(List(int)))
[Backend]   sta: latency(UncertainLatency(None))src(List(List(int)))
[Backend]   std: latency(CertainLatency(0,0))src(List(List(int), List(fp)))
[Backend]   mou: latency(UncertainLatency(None))src(List(List(int)))
[Backend]   moud: latency(CertainLatency(0,0))src(List(List(int)))
[Backend]   vialuFix: vconfigIdx(4), maskSrcIdx(3), latency(CertainLatency(1,0))src(List(List(vec, vec, vec, masksrc, vconfig)))
[Backend]   vipu: vconfigIdx(4), maskSrcIdx(3), latency(CertainLatency(2,0))src(List(List(vec, vec, vec, masksrc, vconfig)))
[Backend]   vldu: vconfigIdx(4), maskSrcIdx(3), latency(UncertainLatency(None))src(List(List(vec, vec, vec, masksrc, vconfig)))
[Backend]   vstu: vconfigIdx(4), maskSrcIdx(3), latency(UncertainLatency(None))src(List(List(vec, vec, vec, masksrc, vconfig)))
[Backend]   falu: latency(CertainLatency(1,0))src(List(List(fp, fp)))
[Backend]   fmac: latency(CertainLatency(3,0))src(List(List(fp, fp, fp)))
[Backend]   fcvt: latency(CertainLatency(2,0))src(List(List(fp)))
[Backend]   fdiv: latency(UncertainLatency(None))src(List(List(fp, fp)))
[Backend]   vfalu: vconfigIdx(4), maskSrcIdx(3), latency(CertainLatency(1,0))src(List(List(vec, vec, vec, masksrc, vconfig)))
[Backend]   vfma: vconfigIdx(4), maskSrcIdx(3), latency(CertainLatency(3,0))src(List(List(vec, vec, vec, masksrc, vconfig)))
[Backend]   vfcvt: vconfigIdx(4), maskSrcIdx(3), latency(CertainLatency(2,0))src(List(List(vec, vec, vec, masksrc, vconfig)))
[Backend]   hylda: latency(UncertainLatency(Some(3)))src(List(List(int)))
[Backend]   hysta: latency(UncertainLatency(None))src(List(List(int)))
[Backend] Int RdConfigs: ExuName(Priority)
[Backend]   port(0): ALU0(0)
[Backend]   port(1): ALU0(0),BJU3(1)
[Backend]   port(2): ALU1(0)
[Backend]   port(3): ALU1(0),BJU2(1)
[Backend]   port(4): ALU2(0)
[Backend]   port(5): BJU1(1),ALU2(0)
[Backend]   port(6): ALU3(0)
[Backend]   port(7): BJU0(1),ALU3(0)
[Backend]   port(8): BJU0(0),STA0(1)
[Backend]   port(9): BJU1(0),STA1(1)
[Backend]   port(10): BJU2(0),STD0(1)
[Backend]   port(11): BJU3(0),STD1(1)
[Backend]   port(12): LDU0(0)
[Backend]   port(13): LDU1(0)
[Backend]   port(14): LDU2(0)
[Backend] Int WbConfigs: ExuName(Priority)
[Backend]   port(0): ALU0(0),BJU2(1),FEX0(1),FEX2(2)
[Backend]   port(1): ALU1(0)
[Backend]   port(2): BJU1(1),ALU2(0),VFEX1(2)
[Backend]   port(3): ALU3(0),VFEX3(2)
[Backend]   port(4): BJU0(0),BJU3(1)
[Backend]   port(5): LDU0(0)
[Backend]   port(6): LDU1(0)
[Backend]   port(7): LDU2(0)
[Backend] Fp RdConfigs: ExuName(Priority)
[Backend]   port(0): FEX0(0)
[Backend]   port(1): FEX0(0)
[Backend]   port(2): FEX1(0)
[Backend]   port(3): FEX1(0)
[Backend]   port(4): FEX1(0)
[Backend]   port(5): FEX2(0)
[Backend]   port(6): FEX2(0)
[Backend]   port(7): FEX3(0)
[Backend]   port(8): FEX3(0)
[Backend]   port(9): FEX3(0)
[Backend]   port(10): FEX4(0)
[Backend]   port(11): FEX4(0)
[Backend]   port(12): FEX5(0)
[Backend]   port(13): FEX5(0)
[Backend]   port(14): STD0(0)
[Backend]   port(15): STD1(0)
[Backend] Fp WbConfigs: ExuName(Priority)
[Backend]   port(0): FEX0(0)
[Backend]   port(1): FEX1(0)
[Backend]   port(2): FEX2(0)
[Backend]   port(3): FEX3(0)
[Backend]   port(4): BJU2(0),FEX4(1)
[Backend]   port(5): FEX5(1),LDU0(0)
[Backend]   port(6): LDU1(0)
[Backend]   port(7): LDU2(0)
[Backend] Vf RdConfigs: ExuName(Priority)
[Backend]   port(0): VFEX0(0),VFEX3(1),VFEX4(2)
[Backend]   port(1): VFEX0(0),VFEX3(1),VFEX4(2)
[Backend]   port(2): VFEX0(0),VFEX3(1),VFEX4(2)
[Backend]   port(3): VFEX0(0),VFEX3(1),VFEX4(2)
[Backend]   port(4): VFEX0(0),VFEX3(1),VFEX4(2)
[Backend]   port(5): VFEX1(0),VFEX2(1),VFEX5(2)
[Backend]   port(6): VFEX1(0),VFEX2(1),VFEX5(2)
[Backend]   port(7): VFEX1(0),VFEX2(1),VFEX5(2)
[Backend]   port(8): VFEX1(0),VFEX2(1),VFEX5(2)
[Backend]   port(9): VFEX1(0),VFEX2(1),VFEX5(2)
[Backend]   port(10): VLSU0(0)
[Backend]   port(11): VLSU0(0)
[Backend]   port(12): VLSU0(0)
[Backend]   port(13): VLSU0(0)
[Backend]   port(14): VLSU0(0)
[Backend] Vf WbConfigs: ExuName(Priority)
[Backend]   port(0): VLSU0(0)
[Backend]   port(1): FEX0(0)
[Backend]   port(2): VFEX4(0)
[Backend]   port(3): VFEX5(0)
[Backend]   port(4): VFEX0(0)
[Backend]   port(5): BJU2(1),VFEX1(0)
[Backend]   port(6): VFEX2(0)
[Backend]   port(7): VFEX3(0)
[Backend] Dispatch Configs:
[Backend] Load IQ enq width(6), Store IQ enq width(4)
[Backend] Load DP width(6), Store DP width(4)
[Backend] copyPdestInfo HashMap(0 -> (2,-1), 1 -> (2,-1), 2 -> (2,-1), 3 -> (2,-1), 4 -> (2,-1), 6 -> (2,-1), 22 -> (2,-1), 23 -> (2,-1), 24 -> (2,-1))
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 1 numWakeupIQ 0
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 3 numWakeupIQ 0
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 5 numWakeupIQ 0
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 7 numWakeupIQ 0
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 12 numWakeupIQ 0
[Backend] exuIdx 13 numWakeupIQ 0
[Backend] exuIdx 14 numWakeupIQ 3
[Backend] exuIdx 15 numWakeupIQ 3
[Backend] exuIdx 16 numWakeupIQ 3
[Backend] exuIdx 17 numWakeupIQ 3
[Backend] exuIdx 18 numWakeupIQ 0
[Backend] exuIdx 19 numWakeupIQ 0
[Backend] exuIdx 20 numWakeupIQ 0
[Backend] exuIdx 21 numWakeupIQ 0
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 25 numWakeupIQ 0
[Backend] exuIdx 26 numWakeupIQ 0
[Backend] exuIdx 27 numWakeupIQ 0
[DataPath] Preg Params: 
[DataPath]   Int R(15), W(8) 
[DataPath]   Fp R(16), W(8) 
[DataPath]   Vf R(15), W(8) 
TLClientsMerger: Merging clients:
TLMasterParameters(L2, IdRange(256,512), List(), List(AddressSet(0x0, ~0x40)), Set(), false, false, P, TBALGFPH, false)
TLMasterParameters(L2, IdRange(0,256), List(), List(AddressSet(0x40, ~0x40)), Set(), false, false, P, TBALGFPH, false)
Merged params:
List(TLMasterParameters(L2, IdRange(0,512), List(), List(AddressSet(0x0, ~0x40), AddressSet(0x40, ~0x40)), Set(), false, false, P, TBALGFPH, false))
TLClientsMerger: Merging clients:
TLMasterParameters(L3, IdRange(0,16), List(), List(AddressSet(0x0, ~0x0)), Set(), false, false, P, TBALGFPH, false)
Merged params:
List(TLMasterParameters(L3, IdRange(0,16), List(), List(AddressSet(0x0, ~0x0)), Set(), false, false, P, TBALGFPH, false))
Interrupt map (2 harts 65 interrupts):
  [1, 64] => plicSource
  [65, 65] => beu

ICache:
  ICacheSets: 64
  ICacheWays: 4
  ICacheBanks: 2
  enableICachePrefetch:     true
  prefetchToL1:       false
  prefetchPipeNum:    1
  nPrefetchEntries:   12
  nPrefBufferEntries: 32
  maxIPFMoveConf:     1
Constantin initRead: isWriteICacheTable0 = 0
Cache op decoder (icache):
  Id 0
[composer] bypassing output of fast pred: FauFTB
total meta size: 417


history buffer length 144
Constantin initRead: isWriteFetchToIBufferTable0 = 0
Constantin initRead: isWriteIfuWbToFtqTable0 = 0
ftq redirect SRAM: entry 251 * 8 * 3
ftq redirect SRAM: ahead fh 24 * 8 * 3
Constantin initRead: isWritePrefetchPtrTable0 = 0
Constantin initRead: isWriteFTQTable0 = 0
itlb_storage tlb_fa: nSets1 nWays:4
itlb: page: 4 fa plru
(Frontend perfEvents Set,noEvent,UInt<1>(0),0)
(Frontend perfEvents Set,frontendFlush                ,NewIFU.io_perf[0].value: IO[UInt<6>],1)
(Frontend perfEvents Set,ifu_req                      ,NewIFU.io_perf[1].value: IO[UInt<6>],2)
(Frontend perfEvents Set,ifu_miss                     ,NewIFU.io_perf[2].value: IO[UInt<6>],3)
(Frontend perfEvents Set,ifu_req_cacheline_0          ,NewIFU.io_perf[3].value: IO[UInt<6>],4)
(Frontend perfEvents Set,ifu_req_cacheline_1          ,NewIFU.io_perf[4].value: IO[UInt<6>],5)
(Frontend perfEvents Set,ifu_req_cacheline_0_hit      ,NewIFU.io_perf[5].value: IO[UInt<6>],6)
(Frontend perfEvents Set,ifu_req_cacheline_1_hit      ,NewIFU.io_perf[6].value: IO[UInt<6>],7)
(Frontend perfEvents Set,only_0_hit                   ,NewIFU.io_perf[7].value: IO[UInt<6>],8)
(Frontend perfEvents Set,only_0_miss                  ,NewIFU.io_perf[8].value: IO[UInt<6>],9)
(Frontend perfEvents Set,hit_0_hit_1                  ,NewIFU.io_perf[9].value: IO[UInt<6>],10)
(Frontend perfEvents Set,hit_0_miss_1                 ,NewIFU.io_perf[10].value: IO[UInt<6>],11)
(Frontend perfEvents Set,miss_0_hit_1                 ,NewIFU.io_perf[11].value: IO[UInt<6>],12)
(Frontend perfEvents Set,miss_0_miss_1                ,NewIFU.io_perf[12].value: IO[UInt<6>],13)
(Frontend perfEvents Set,IBuffer_Flushed  ,IBuffer.io_perf[0].value: IO[UInt<6>],14)
(Frontend perfEvents Set,IBuffer_hungry   ,IBuffer.io_perf[1].value: IO[UInt<6>],15)
(Frontend perfEvents Set,IBuffer_1_4_valid,IBuffer.io_perf[2].value: IO[UInt<6>],16)
(Frontend perfEvents Set,IBuffer_2_4_valid,IBuffer.io_perf[3].value: IO[UInt<6>],17)
(Frontend perfEvents Set,IBuffer_3_4_valid,IBuffer.io_perf[4].value: IO[UInt<6>],18)
(Frontend perfEvents Set,IBuffer_4_4_valid,IBuffer.io_perf[5].value: IO[UInt<6>],19)
(Frontend perfEvents Set,IBuffer_full     ,IBuffer.io_perf[6].value: IO[UInt<6>],20)
(Frontend perfEvents Set,Front_Bubble     ,IBuffer.io_perf[7].value: IO[UInt<6>],21)
(Frontend perfEvents Set,icache_miss_cnt  ,ICache.io_perf[0].value: IO[UInt<6>],22)
(Frontend perfEvents Set,icache_miss_penalty,ICache.io_perf[1].value: IO[UInt<6>],23)
(Frontend perfEvents Set,bpu_s2_redirect        ,Ftq.io_perf[0].value: IO[UInt<6>],24)
(Frontend perfEvents Set,bpu_s3_redirect        ,Ftq.io_perf[1].value: IO[UInt<6>],25)
(Frontend perfEvents Set,bpu_to_ftq_stall       ,Ftq.io_perf[2].value: IO[UInt<6>],26)
(Frontend perfEvents Set,mispredictRedirect     ,Ftq.io_perf[3].value: IO[UInt<6>],27)
(Frontend perfEvents Set,replayRedirect         ,Ftq.io_perf[4].value: IO[UInt<6>],28)
(Frontend perfEvents Set,predecodeRedirect      ,Ftq.io_perf[5].value: IO[UInt<6>],29)
(Frontend perfEvents Set,to_ifu_bubble          ,Ftq.io_perf[6].value: IO[UInt<6>],30)
(Frontend perfEvents Set,from_bpu_real_bubble   ,Ftq.io_perf[7].value: IO[UInt<6>],31)
(Frontend perfEvents Set,BpInstr                ,Ftq.io_perf[8].value: IO[UInt<6>],32)
(Frontend perfEvents Set,BpBInstr               ,Ftq.io_perf[9].value: IO[UInt<6>],33)
(Frontend perfEvents Set,BpRight                ,Ftq.io_perf[10].value: IO[UInt<6>],34)
(Frontend perfEvents Set,BpWrong                ,Ftq.io_perf[11].value: IO[UInt<6>],35)
(Frontend perfEvents Set,BpBRight               ,Ftq.io_perf[12].value: IO[UInt<6>],36)
(Frontend perfEvents Set,BpBWrong               ,Ftq.io_perf[13].value: IO[UInt<6>],37)
(Frontend perfEvents Set,BpJRight               ,Ftq.io_perf[14].value: IO[UInt<6>],38)
(Frontend perfEvents Set,BpJWrong               ,Ftq.io_perf[15].value: IO[UInt<6>],39)
(Frontend perfEvents Set,BpIRight               ,Ftq.io_perf[16].value: IO[UInt<6>],40)
(Frontend perfEvents Set,BpIWrong               ,Ftq.io_perf[17].value: IO[UInt<6>],41)
(Frontend perfEvents Set,BpCRight               ,Ftq.io_perf[18].value: IO[UInt<6>],42)
(Frontend perfEvents Set,BpCWrong               ,Ftq.io_perf[19].value: IO[UInt<6>],43)
(Frontend perfEvents Set,BpRRight               ,Ftq.io_perf[20].value: IO[UInt<6>],44)
(Frontend perfEvents Set,BpRWrong               ,Ftq.io_perf[21].value: IO[UInt<6>],45)
(Frontend perfEvents Set,ftb_false_hit          ,Ftq.io_perf[22].value: IO[UInt<6>],46)
(Frontend perfEvents Set,ftb_hit                ,Ftq.io_perf[23].value: IO[UInt<6>],47)
(Frontend perfEvents Set,fauftb_commit_hit       ,Predictor.io_perf[0].value: IO[UInt<6>],48)
(Frontend perfEvents Set,fauftb_commit_miss      ,Predictor.io_perf[1].value: IO[UInt<6>],49)
(Frontend perfEvents Set,tage_tht_hit                  ,Predictor.io_perf[2].value: IO[UInt<6>],50)
(Frontend perfEvents Set,sc_update_on_mispred          ,Predictor.io_perf[3].value: IO[UInt<6>],51)
(Frontend perfEvents Set,sc_update_on_unconf           ,Predictor.io_perf[4].value: IO[UInt<6>],52)
(Frontend perfEvents Set,ftb_commit_hits            ,Predictor.io_perf[5].value: IO[UInt<6>],53)
(Frontend perfEvents Set,ftb_commit_misses          ,Predictor.io_perf[6].value: IO[UInt<6>],54)
Rob: size 48, numExuWbPorts: 26, numStdWbPorts: 2, commitwidth: 8
ExceptionGen:
num of exceptions: 13
pcMem read num: 6
pcMem read num for exu: 8
ImmUnion max len: 20
[VsetModule] log2Vlen: 7
[VsetModule] vlWidth: 8
[Rename] numRegSrc: 5
[Rename.Compress] i: 0 key: Vector(0, 0, 0, 0, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 1 key: Vector(1, 0, 0, 0, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 2 key: Vector(0, 1, 0, 0, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 3 key: Vector(1, 1, 0, 0, 0, 0) needRobs: Vector(0, 1, 1, 1, 1, 1) uopSizes: Vector(2, 2, 1, 1, 1, 1) masks: Vector(110000, 110000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 4 key: Vector(0, 0, 1, 0, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 5 key: Vector(1, 0, 1, 0, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 6 key: Vector(0, 1, 1, 0, 0, 0) needRobs: Vector(1, 0, 1, 1, 1, 1) uopSizes: Vector(1, 2, 2, 1, 1, 1) masks: Vector(100000, 011000, 011000, 000100, 000010, 000001)
[Rename.Compress] i: 7 key: Vector(1, 1, 1, 0, 0, 0) needRobs: Vector(0, 0, 1, 1, 1, 1) uopSizes: Vector(3, 3, 3, 1, 1, 1) masks: Vector(111000, 111000, 111000, 000100, 000010, 000001)
[Rename.Compress] i: 8 key: Vector(0, 0, 0, 1, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 9 key: Vector(1, 0, 0, 1, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 10 key: Vector(0, 1, 0, 1, 0, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 11 key: Vector(1, 1, 0, 1, 0, 0) needRobs: Vector(0, 1, 1, 1, 1, 1) uopSizes: Vector(2, 2, 1, 1, 1, 1) masks: Vector(110000, 110000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 12 key: Vector(0, 0, 1, 1, 0, 0) needRobs: Vector(1, 1, 0, 1, 1, 1) uopSizes: Vector(1, 1, 2, 2, 1, 1) masks: Vector(100000, 010000, 001100, 001100, 000010, 000001)
[Rename.Compress] i: 13 key: Vector(1, 0, 1, 1, 0, 0) needRobs: Vector(1, 1, 0, 1, 1, 1) uopSizes: Vector(1, 1, 2, 2, 1, 1) masks: Vector(100000, 010000, 001100, 001100, 000010, 000001)
[Rename.Compress] i: 14 key: Vector(0, 1, 1, 1, 0, 0) needRobs: Vector(1, 0, 0, 1, 1, 1) uopSizes: Vector(1, 3, 3, 3, 1, 1) masks: Vector(100000, 011100, 011100, 011100, 000010, 000001)
[Rename.Compress] i: 15 key: Vector(1, 1, 1, 1, 0, 0) needRobs: Vector(0, 0, 0, 1, 1, 1) uopSizes: Vector(4, 4, 4, 4, 1, 1) masks: Vector(111100, 111100, 111100, 111100, 000010, 000001)
[Rename.Compress] i: 16 key: Vector(0, 0, 0, 0, 1, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 17 key: Vector(1, 0, 0, 0, 1, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 18 key: Vector(0, 1, 0, 0, 1, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 19 key: Vector(1, 1, 0, 0, 1, 0) needRobs: Vector(0, 1, 1, 1, 1, 1) uopSizes: Vector(2, 2, 1, 1, 1, 1) masks: Vector(110000, 110000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 20 key: Vector(0, 0, 1, 0, 1, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 21 key: Vector(1, 0, 1, 0, 1, 0) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 22 key: Vector(0, 1, 1, 0, 1, 0) needRobs: Vector(1, 0, 1, 1, 1, 1) uopSizes: Vector(1, 2, 2, 1, 1, 1) masks: Vector(100000, 011000, 011000, 000100, 000010, 000001)
[Rename.Compress] i: 23 key: Vector(1, 1, 1, 0, 1, 0) needRobs: Vector(0, 0, 1, 1, 1, 1) uopSizes: Vector(3, 3, 3, 1, 1, 1) masks: Vector(111000, 111000, 111000, 000100, 000010, 000001)
[Rename.Compress] i: 24 key: Vector(0, 0, 0, 1, 1, 0) needRobs: Vector(1, 1, 1, 0, 1, 1) uopSizes: Vector(1, 1, 1, 2, 2, 1) masks: Vector(100000, 010000, 001000, 000110, 000110, 000001)
[Rename.Compress] i: 25 key: Vector(1, 0, 0, 1, 1, 0) needRobs: Vector(1, 1, 1, 0, 1, 1) uopSizes: Vector(1, 1, 1, 2, 2, 1) masks: Vector(100000, 010000, 001000, 000110, 000110, 000001)
[Rename.Compress] i: 26 key: Vector(0, 1, 0, 1, 1, 0) needRobs: Vector(1, 1, 1, 0, 1, 1) uopSizes: Vector(1, 1, 1, 2, 2, 1) masks: Vector(100000, 010000, 001000, 000110, 000110, 000001)
[Rename.Compress] i: 27 key: Vector(1, 1, 0, 1, 1, 0) needRobs: Vector(0, 1, 1, 0, 1, 1) uopSizes: Vector(2, 2, 1, 2, 2, 1) masks: Vector(110000, 110000, 001000, 000110, 000110, 000001)
[Rename.Compress] i: 28 key: Vector(0, 0, 1, 1, 1, 0) needRobs: Vector(1, 1, 0, 0, 1, 1) uopSizes: Vector(1, 1, 3, 3, 3, 1) masks: Vector(100000, 010000, 001110, 001110, 001110, 000001)
[Rename.Compress] i: 29 key: Vector(1, 0, 1, 1, 1, 0) needRobs: Vector(1, 1, 0, 0, 1, 1) uopSizes: Vector(1, 1, 3, 3, 3, 1) masks: Vector(100000, 010000, 001110, 001110, 001110, 000001)
[Rename.Compress] i: 30 key: Vector(0, 1, 1, 1, 1, 0) needRobs: Vector(1, 0, 0, 0, 1, 1) uopSizes: Vector(1, 4, 4, 4, 4, 1) masks: Vector(100000, 011110, 011110, 011110, 011110, 000001)
[Rename.Compress] i: 31 key: Vector(1, 1, 1, 1, 1, 0) needRobs: Vector(0, 0, 0, 0, 1, 1) uopSizes: Vector(5, 5, 5, 5, 5, 1) masks: Vector(111110, 111110, 111110, 111110, 111110, 000001)
[Rename.Compress] i: 32 key: Vector(0, 0, 0, 0, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 33 key: Vector(1, 0, 0, 0, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 34 key: Vector(0, 1, 0, 0, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 35 key: Vector(1, 1, 0, 0, 0, 1) needRobs: Vector(0, 1, 1, 1, 1, 1) uopSizes: Vector(2, 2, 1, 1, 1, 1) masks: Vector(110000, 110000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 36 key: Vector(0, 0, 1, 0, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 37 key: Vector(1, 0, 1, 0, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 38 key: Vector(0, 1, 1, 0, 0, 1) needRobs: Vector(1, 0, 1, 1, 1, 1) uopSizes: Vector(1, 2, 2, 1, 1, 1) masks: Vector(100000, 011000, 011000, 000100, 000010, 000001)
[Rename.Compress] i: 39 key: Vector(1, 1, 1, 0, 0, 1) needRobs: Vector(0, 0, 1, 1, 1, 1) uopSizes: Vector(3, 3, 3, 1, 1, 1) masks: Vector(111000, 111000, 111000, 000100, 000010, 000001)
[Rename.Compress] i: 40 key: Vector(0, 0, 0, 1, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 41 key: Vector(1, 0, 0, 1, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 42 key: Vector(0, 1, 0, 1, 0, 1) needRobs: Vector(1, 1, 1, 1, 1, 1) uopSizes: Vector(1, 1, 1, 1, 1, 1) masks: Vector(100000, 010000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 43 key: Vector(1, 1, 0, 1, 0, 1) needRobs: Vector(0, 1, 1, 1, 1, 1) uopSizes: Vector(2, 2, 1, 1, 1, 1) masks: Vector(110000, 110000, 001000, 000100, 000010, 000001)
[Rename.Compress] i: 44 key: Vector(0, 0, 1, 1, 0, 1) needRobs: Vector(1, 1, 0, 1, 1, 1) uopSizes: Vector(1, 1, 2, 2, 1, 1) masks: Vector(100000, 010000, 001100, 001100, 000010, 000001)
[Rename.Compress] i: 45 key: Vector(1, 0, 1, 1, 0, 1) needRobs: Vector(1, 1, 0, 1, 1, 1) uopSizes: Vector(1, 1, 2, 2, 1, 1) masks: Vector(100000, 010000, 001100, 001100, 000010, 000001)
[Rename.Compress] i: 46 key: Vector(0, 1, 1, 1, 0, 1) needRobs: Vector(1, 0, 0, 1, 1, 1) uopSizes: Vector(1, 3, 3, 3, 1, 1) masks: Vector(100000, 011100, 011100, 011100, 000010, 000001)
[Rename.Compress] i: 47 key: Vector(1, 1, 1, 1, 0, 1) needRobs: Vector(0, 0, 0, 1, 1, 1) uopSizes: Vector(4, 4, 4, 4, 1, 1) masks: Vector(111100, 111100, 111100, 111100, 000010, 000001)
[Rename.Compress] i: 48 key: Vector(0, 0, 0, 0, 1, 1) needRobs: Vector(1, 1, 1, 1, 0, 1) uopSizes: Vector(1, 1, 1, 1, 2, 2) masks: Vector(100000, 010000, 001000, 000100, 000011, 000011)
[Rename.Compress] i: 49 key: Vector(1, 0, 0, 0, 1, 1) needRobs: Vector(1, 1, 1, 1, 0, 1) uopSizes: Vector(1, 1, 1, 1, 2, 2) masks: Vector(100000, 010000, 001000, 000100, 000011, 000011)
[Rename.Compress] i: 50 key: Vector(0, 1, 0, 0, 1, 1) needRobs: Vector(1, 1, 1, 1, 0, 1) uopSizes: Vector(1, 1, 1, 1, 2, 2) masks: Vector(100000, 010000, 001000, 000100, 000011, 000011)
[Rename.Compress] i: 51 key: Vector(1, 1, 0, 0, 1, 1) needRobs: Vector(0, 1, 1, 1, 0, 1) uopSizes: Vector(2, 2, 1, 1, 2, 2) masks: Vector(110000, 110000, 001000, 000100, 000011, 000011)
[Rename.Compress] i: 52 key: Vector(0, 0, 1, 0, 1, 1) needRobs: Vector(1, 1, 1, 1, 0, 1) uopSizes: Vector(1, 1, 1, 1, 2, 2) masks: Vector(100000, 010000, 001000, 000100, 000011, 000011)
[Rename.Compress] i: 53 key: Vector(1, 0, 1, 0, 1, 1) needRobs: Vector(1, 1, 1, 1, 0, 1) uopSizes: Vector(1, 1, 1, 1, 2, 2) masks: Vector(100000, 010000, 001000, 000100, 000011, 000011)
[Rename.Compress] i: 54 key: Vector(0, 1, 1, 0, 1, 1) needRobs: Vector(1, 0, 1, 1, 0, 1) uopSizes: Vector(1, 2, 2, 1, 2, 2) masks: Vector(100000, 011000, 011000, 000100, 000011, 000011)
[Rename.Compress] i: 55 key: Vector(1, 1, 1, 0, 1, 1) needRobs: Vector(0, 0, 1, 1, 0, 1) uopSizes: Vector(3, 3, 3, 1, 2, 2) masks: Vector(111000, 111000, 111000, 000100, 000011, 000011)
[Rename.Compress] i: 56 key: Vector(0, 0, 0, 1, 1, 1) needRobs: Vector(1, 1, 1, 0, 0, 1) uopSizes: Vector(1, 1, 1, 3, 3, 3) masks: Vector(100000, 010000, 001000, 000111, 000111, 000111)
[Rename.Compress] i: 57 key: Vector(1, 0, 0, 1, 1, 1) needRobs: Vector(1, 1, 1, 0, 0, 1) uopSizes: Vector(1, 1, 1, 3, 3, 3) masks: Vector(100000, 010000, 001000, 000111, 000111, 000111)
[Rename.Compress] i: 58 key: Vector(0, 1, 0, 1, 1, 1) needRobs: Vector(1, 1, 1, 0, 0, 1) uopSizes: Vector(1, 1, 1, 3, 3, 3) masks: Vector(100000, 010000, 001000, 000111, 000111, 000111)
[Rename.Compress] i: 59 key: Vector(1, 1, 0, 1, 1, 1) needRobs: Vector(0, 1, 1, 0, 0, 1) uopSizes: Vector(2, 2, 1, 3, 3, 3) masks: Vector(110000, 110000, 001000, 000111, 000111, 000111)
[Rename.Compress] i: 60 key: Vector(0, 0, 1, 1, 1, 1) needRobs: Vector(1, 1, 0, 0, 0, 1) uopSizes: Vector(1, 1, 4, 4, 4, 4) masks: Vector(100000, 010000, 001111, 001111, 001111, 001111)
[Rename.Compress] i: 61 key: Vector(1, 0, 1, 1, 1, 1) needRobs: Vector(1, 1, 0, 0, 0, 1) uopSizes: Vector(1, 1, 4, 4, 4, 4) masks: Vector(100000, 010000, 001111, 001111, 001111, 001111)
[Rename.Compress] i: 62 key: Vector(0, 1, 1, 1, 1, 1) needRobs: Vector(1, 0, 0, 0, 0, 1) uopSizes: Vector(1, 5, 5, 5, 5, 5) masks: Vector(100000, 011111, 011111, 011111, 011111, 011111)
[Rename.Compress] i: 63 key: Vector(1, 1, 1, 1, 1, 1) needRobs: Vector(0, 0, 0, 0, 0, 1) uopSizes: Vector(6, 6, 6, 6, 6, 6) masks: Vector(111111, 111111, 111111, 111111, 111111, 111111)
[Rename] idx of pdest in bypassCond 5
(CtrlBlock perfEvents Set,noEvent,UInt<1>(0),0)
(CtrlBlock perfEvents Set,decoder_fused_instr,DecodeStage.io_perf[0].value: IO[UInt<6>],1)
(CtrlBlock perfEvents Set,decoder_waitInstr,DecodeStage.io_perf[1].value: IO[UInt<6>],2)
(CtrlBlock perfEvents Set,decoder_stall_cycle,DecodeStage.io_perf[2].value: IO[UInt<6>],3)
(CtrlBlock perfEvents Set,decoder_utilization,DecodeStage.io_perf[3].value: IO[UInt<6>],4)
(CtrlBlock perfEvents Set,rename_in                  ,Rename.io_perf[0].value: IO[UInt<6>],5)
(CtrlBlock perfEvents Set,rename_waitinstr           ,Rename.io_perf[1].value: IO[UInt<6>],6)
(CtrlBlock perfEvents Set,rename_stall               ,Rename.io_perf[2].value: IO[UInt<6>],7)
(CtrlBlock perfEvents Set,rename_stall_cycle_walk    ,Rename.io_perf[3].value: IO[UInt<6>],8)
(CtrlBlock perfEvents Set,rename_stall_cycle_dispatch,Rename.io_perf[4].value: IO[UInt<6>],9)
(CtrlBlock perfEvents Set,rename_stall_cycle_int     ,Rename.io_perf[5].value: IO[UInt<6>],10)
(CtrlBlock perfEvents Set,rename_stall_cycle_fp      ,Rename.io_perf[6].value: IO[UInt<6>],11)
(CtrlBlock perfEvents Set,rename_stall_cycle_vec     ,Rename.io_perf[7].value: IO[UInt<6>],12)
(CtrlBlock perfEvents Set,me_freelist_1_4_valid,Rename.io_perf[8].value: IO[UInt<6>],13)
(CtrlBlock perfEvents Set,me_freelist_2_4_valid,Rename.io_perf[9].value: IO[UInt<6>],14)
(CtrlBlock perfEvents Set,me_freelist_3_4_valid,Rename.io_perf[10].value: IO[UInt<6>],15)
(CtrlBlock perfEvents Set,me_freelist_4_4_valid,Rename.io_perf[11].value: IO[UInt<6>],16)
(CtrlBlock perfEvents Set,std_freelist_1_4_valid,Rename.io_perf[12].value: IO[UInt<6>],17)
(CtrlBlock perfEvents Set,std_freelist_2_4_valid,Rename.io_perf[13].value: IO[UInt<6>],18)
(CtrlBlock perfEvents Set,std_freelist_3_4_valid,Rename.io_perf[14].value: IO[UInt<6>],19)
(CtrlBlock perfEvents Set,std_freelist_4_4_valid,Rename.io_perf[15].value: IO[UInt<6>],20)
(CtrlBlock perfEvents Set,std_freelist_1_4_valid,Rename.io_perf[16].value: IO[UInt<6>],21)
(CtrlBlock perfEvents Set,std_freelist_2_4_valid,Rename.io_perf[17].value: IO[UInt<6>],22)
(CtrlBlock perfEvents Set,std_freelist_3_4_valid,Rename.io_perf[18].value: IO[UInt<6>],23)
(CtrlBlock perfEvents Set,std_freelist_4_4_valid,Rename.io_perf[19].value: IO[UInt<6>],24)
(CtrlBlock perfEvents Set,dispatch_in,Dispatch.io_perf[0].value: IO[UInt<6>],25)
(CtrlBlock perfEvents Set,dispatch_empty,Dispatch.io_perf[1].value: IO[UInt<6>],26)
(CtrlBlock perfEvents Set,dispatch_utili,Dispatch.io_perf[2].value: IO[UInt<6>],27)
(CtrlBlock perfEvents Set,dispatch_waitinstr,Dispatch.io_perf[3].value: IO[UInt<6>],28)
(CtrlBlock perfEvents Set,dispatch_stall_cycle_lsq,Dispatch.io_perf[4].value: IO[UInt<6>],29)
(CtrlBlock perfEvents Set,dispatch_stall_cycle_rob,Dispatch.io_perf[5].value: IO[UInt<6>],30)
(CtrlBlock perfEvents Set,dispatch_stall_cycle_int_dq,Dispatch.io_perf[6].value: IO[UInt<6>],31)
(CtrlBlock perfEvents Set,dispatch_stall_cycle_fp_dq,Dispatch.io_perf[7].value: IO[UInt<6>],32)
(CtrlBlock perfEvents Set,dispatch_stall_cycle_ls_dq,Dispatch.io_perf[8].value: IO[UInt<6>],33)
(CtrlBlock perfEvents Set,dispatchq_in,DispatchQueue.io_perf[0].value: IO[UInt<6>],34)
(CtrlBlock perfEvents Set,dispatchq_out,DispatchQueue.io_perf[1].value: IO[UInt<6>],35)
(CtrlBlock perfEvents Set,dispatchq_out_try,DispatchQueue.io_perf[2].value: IO[UInt<6>],36)
(CtrlBlock perfEvents Set,dispatchq_fake_block,DispatchQueue.io_perf[3].value: IO[UInt<6>],37)
(CtrlBlock perfEvents Set,dispatchq_1_4_valid ,DispatchQueue.io_perf[4].value: IO[UInt<6>],38)
(CtrlBlock perfEvents Set,dispatchq_2_4_valid ,DispatchQueue.io_perf[5].value: IO[UInt<6>],39)
(CtrlBlock perfEvents Set,dispatchq_3_4_valid ,DispatchQueue.io_perf[6].value: IO[UInt<6>],40)
(CtrlBlock perfEvents Set,dispatchq_4_4_valid ,DispatchQueue.io_perf[7].value: IO[UInt<6>],41)
(CtrlBlock perfEvents Set,dispatchq_in,DispatchQueue_1.io_perf[0].value: IO[UInt<6>],42)
(CtrlBlock perfEvents Set,dispatchq_out,DispatchQueue_1.io_perf[1].value: IO[UInt<6>],43)
(CtrlBlock perfEvents Set,dispatchq_out_try,DispatchQueue_1.io_perf[2].value: IO[UInt<6>],44)
(CtrlBlock perfEvents Set,dispatchq_fake_block,DispatchQueue_1.io_perf[3].value: IO[UInt<6>],45)
(CtrlBlock perfEvents Set,dispatchq_1_4_valid ,DispatchQueue_1.io_perf[4].value: IO[UInt<6>],46)
(CtrlBlock perfEvents Set,dispatchq_2_4_valid ,DispatchQueue_1.io_perf[5].value: IO[UInt<6>],47)
(CtrlBlock perfEvents Set,dispatchq_3_4_valid ,DispatchQueue_1.io_perf[6].value: IO[UInt<6>],48)
(CtrlBlock perfEvents Set,dispatchq_4_4_valid ,DispatchQueue_1.io_perf[7].value: IO[UInt<6>],49)
(CtrlBlock perfEvents Set,dispatchq_in,DispatchQueue_3.io_perf[0].value: IO[UInt<6>],50)
(CtrlBlock perfEvents Set,dispatchq_out,DispatchQueue_3.io_perf[1].value: IO[UInt<6>],51)
(CtrlBlock perfEvents Set,dispatchq_out_try,DispatchQueue_3.io_perf[2].value: IO[UInt<6>],52)
(CtrlBlock perfEvents Set,dispatchq_fake_block,DispatchQueue_3.io_perf[3].value: IO[UInt<6>],53)
(CtrlBlock perfEvents Set,dispatchq_1_4_valid ,DispatchQueue_3.io_perf[4].value: IO[UInt<6>],54)
(CtrlBlock perfEvents Set,dispatchq_2_4_valid ,DispatchQueue_3.io_perf[5].value: IO[UInt<6>],55)
(CtrlBlock perfEvents Set,dispatchq_3_4_valid ,DispatchQueue_3.io_perf[6].value: IO[UInt<6>],56)
(CtrlBlock perfEvents Set,dispatchq_4_4_valid ,DispatchQueue_3.io_perf[7].value: IO[UInt<6>],57)
(CtrlBlock perfEvents Set,dispatchq_in,DispatchQueue_4.io_perf[0].value: IO[UInt<6>],58)
(CtrlBlock perfEvents Set,dispatchq_out,DispatchQueue_4.io_perf[1].value: IO[UInt<6>],59)
(CtrlBlock perfEvents Set,dispatchq_out_try,DispatchQueue_4.io_perf[2].value: IO[UInt<6>],60)
(CtrlBlock perfEvents Set,dispatchq_fake_block,DispatchQueue_4.io_perf[3].value: IO[UInt<6>],61)
(CtrlBlock perfEvents Set,dispatchq_1_4_valid ,DispatchQueue_4.io_perf[4].value: IO[UInt<6>],62)
(CtrlBlock perfEvents Set,dispatchq_2_4_valid ,DispatchQueue_4.io_perf[5].value: IO[UInt<6>],63)
(CtrlBlock perfEvents Set,dispatchq_3_4_valid ,DispatchQueue_4.io_perf[6].value: IO[UInt<6>],64)
(CtrlBlock perfEvents Set,dispatchq_4_4_valid ,DispatchQueue_4.io_perf[7].value: IO[UInt<6>],65)
(CtrlBlock perfEvents Set,rob_interrupt_num      ,Rob.io_perf[0].value: IO[UInt<6>],66)
(CtrlBlock perfEvents Set,rob_exception_num      ,Rob.io_perf[1].value: IO[UInt<6>],67)
(CtrlBlock perfEvents Set,rob_flush_pipe_num     ,Rob.io_perf[2].value: IO[UInt<6>],68)
(CtrlBlock perfEvents Set,rob_replay_inst_num    ,Rob.io_perf[3].value: IO[UInt<6>],69)
(CtrlBlock perfEvents Set,rob_commitUop          ,Rob.io_perf[4].value: IO[UInt<6>],70)
(CtrlBlock perfEvents Set,rob_commitInstr        ,Rob.io_perf[5].value: IO[UInt<6>],71)
(CtrlBlock perfEvents Set,rob_commitInstrMove    ,Rob.io_perf[6].value: IO[UInt<6>],72)
(CtrlBlock perfEvents Set,rob_commitInstrFused   ,Rob.io_perf[7].value: IO[UInt<6>],73)
(CtrlBlock perfEvents Set,rob_commitInstrLoad    ,Rob.io_perf[8].value: IO[UInt<6>],74)
(CtrlBlock perfEvents Set,rob_commitInstrBranch  ,Rob.io_perf[9].value: IO[UInt<6>],75)
(CtrlBlock perfEvents Set,rob_commitInstrLoadWait,Rob.io_perf[10].value: IO[UInt<6>],76)
(CtrlBlock perfEvents Set,rob_commitInstrStore   ,Rob.io_perf[11].value: IO[UInt<6>],77)
(CtrlBlock perfEvents Set,rob_walkInstr          ,Rob.io_perf[12].value: IO[UInt<6>],78)
(CtrlBlock perfEvents Set,rob_walkCycle          ,Rob.io_perf[13].value: IO[UInt<6>],79)
(CtrlBlock perfEvents Set,rob_1_4_valid          ,Rob.io_perf[14].value: IO[UInt<6>],80)
(CtrlBlock perfEvents Set,rob_2_4_valid          ,Rob.io_perf[15].value: IO[UInt<6>],81)
(CtrlBlock perfEvents Set,rob_3_4_valid          ,Rob.io_perf[16].value: IO[UInt<6>],82)
(CtrlBlock perfEvents Set,rob_4_4_valid          ,Rob.io_perf[17].value: IO[UInt<6>],83)
(CtrlBlock perfEvents Set,perfEventsEu0,CtrlBlock.perfinfo.perfEventsEu0[0].value: IO[UInt<6>],84)
(CtrlBlock perfEvents Set,perfEventsEu0,CtrlBlock.perfinfo.perfEventsEu0[1].value: IO[UInt<6>],85)
(CtrlBlock perfEvents Set,perfEventsEu0,CtrlBlock.perfinfo.perfEventsEu0[2].value: IO[UInt<6>],86)
(CtrlBlock perfEvents Set,perfEventsEu0,CtrlBlock.perfinfo.perfEventsEu0[3].value: IO[UInt<6>],87)
(CtrlBlock perfEvents Set,perfEventsEu0,CtrlBlock.perfinfo.perfEventsEu0[4].value: IO[UInt<6>],88)
(CtrlBlock perfEvents Set,perfEventsEu0,CtrlBlock.perfinfo.perfEventsEu0[5].value: IO[UInt<6>],89)
(CtrlBlock perfEvents Set,perfEventsEu1,CtrlBlock.perfinfo.perfEventsEu1[0].value: IO[UInt<6>],90)
(CtrlBlock perfEvents Set,perfEventsEu1,CtrlBlock.perfinfo.perfEventsEu1[1].value: IO[UInt<6>],91)
(CtrlBlock perfEvents Set,perfEventsEu1,CtrlBlock.perfinfo.perfEventsEu1[2].value: IO[UInt<6>],92)
(CtrlBlock perfEvents Set,perfEventsEu1,CtrlBlock.perfinfo.perfEventsEu1[3].value: IO[UInt<6>],93)
(CtrlBlock perfEvents Set,perfEventsEu1,CtrlBlock.perfinfo.perfEventsEu1[4].value: IO[UInt<6>],94)
(CtrlBlock perfEvents Set,perfEventsEu1,CtrlBlock.perfinfo.perfEventsEu1[5].value: IO[UInt<6>],95)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[0].value: IO[UInt<6>],96)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[1].value: IO[UInt<6>],97)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[2].value: IO[UInt<6>],98)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[3].value: IO[UInt<6>],99)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[4].value: IO[UInt<6>],100)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[5].value: IO[UInt<6>],101)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[6].value: IO[UInt<6>],102)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[7].value: IO[UInt<6>],103)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[8].value: IO[UInt<6>],104)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[9].value: IO[UInt<6>],105)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[10].value: IO[UInt<6>],106)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[11].value: IO[UInt<6>],107)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[12].value: IO[UInt<6>],108)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[13].value: IO[UInt<6>],109)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[14].value: IO[UInt<6>],110)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[15].value: IO[UInt<6>],111)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[16].value: IO[UInt<6>],112)
(CtrlBlock perfEvents Set,perfEventsRs,CtrlBlock.perfinfo.perfEventsRs[17].value: IO[UInt<6>],113)
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 1 numWakeupIQ 0
[IssueQueueImp] IssueQueueAluMulBkuBrhJmp wakeupFromWB(4), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(1): {ALU0}, numEntries: 8, numRegSrc: 2, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueAluMulBkuBrhJmp fuLatencyMaps: List(Map(alu -> 0, mul -> 2, bku -> 2), Map(jmp -> 0))
[IssueQueueImp] IssueQueueAluMulBkuBrhJmp commonFuCfgs: List()
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 3 numWakeupIQ 0
[IssueQueueImp] IssueQueueAluMulBkuBrhJmp wakeupFromWB(4), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(1): {ALU1}, numEntries: 8, numRegSrc: 2, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueAluMulBkuBrhJmp fuLatencyMaps: List(Map(alu -> 0, mul -> 2, bku -> 2), Map(jmp -> 0))
[IssueQueueImp] IssueQueueAluMulBkuBrhJmp commonFuCfgs: List()
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 5 numWakeupIQ 0
[IssueQueueImp] IssueQueueAluBrhJmpI2fVsetriwiVsetriwvfCsrFenceI2v wakeupFromWB(4), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(1): {ALU2}, numEntries: 8, numRegSrc: 2, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueAluBrhJmpI2fVsetriwiVsetriwvfCsrFenceI2v fuLatencyMaps: List(Map(alu -> 0), HashMap(jmp -> 0, csr -> 0, vsetiwf -> 0, vsetiwi -> 0, i2f -> 2, i2v -> 0))
[IssueQueueImp] IssueQueueAluBrhJmpI2fVsetriwiVsetriwvfCsrFenceI2v commonFuCfgs: List()
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 7 numWakeupIQ 0
[IssueQueueImp] IssueQueueAluDiv wakeupFromWB(4), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(1): {ALU3}, numEntries: 8, numRegSrc: 2, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueAluDiv fuLatencyMaps: List(Map(alu -> 0), Map())
[IssueQueueImp] IssueQueueAluDiv commonFuCfgs: List()
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,-1), 1 -> (2,-1), 2 -> (2,-1), 3 -> (2,-1), 4 -> (2,-1), 6 -> (2,-1), 22 -> (2,-1), 23 -> (2,-1), 24 -> (2,-1))
[Backend] exuIdx 0 be connected, old info (2,-1)
[Backend] exuIdx 0 be connected, new info (2,0)
[Backend] exuIdx 0 use pdestCopy 0
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,0), 1 -> (2,-1), 2 -> (2,-1), 3 -> (2,-1), 4 -> (2,-1), 6 -> (2,-1), 22 -> (2,-1), 23 -> (2,-1), 24 -> (2,-1))
[Backend] exuIdx 2 be connected, old info (2,-1)
[Backend] exuIdx 2 be connected, new info (2,0)
[Backend] exuIdx 2 use pdestCopy 0
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,0), 1 -> (2,-1), 2 -> (2,0), 3 -> (2,-1), 4 -> (2,-1), 6 -> (2,-1), 22 -> (2,-1), 23 -> (2,-1), 24 -> (2,-1))
[Backend] exuIdx 4 be connected, old info (2,-1)
[Backend] exuIdx 4 be connected, new info (2,0)
[Backend] exuIdx 4 use pdestCopy 0
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,0), 1 -> (2,-1), 2 -> (2,0), 3 -> (2,-1), 4 -> (2,0), 6 -> (2,-1), 22 -> (2,-1), 23 -> (2,-1), 24 -> (2,-1))
[Backend] exuIdx 6 be connected, old info (2,-1)
[Backend] exuIdx 6 be connected, new info (2,0)
[Backend] exuIdx 6 use pdestCopy 0
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,0), 1 -> (2,-1), 2 -> (2,0), 3 -> (2,-1), 4 -> (2,0), 6 -> (2,0), 22 -> (2,-1), 23 -> (2,-1), 24 -> (2,-1))
[Backend] exuIdx 22 be connected, old info (2,-1)
[Backend] exuIdx 22 be connected, new info (2,0)
[Backend] exuIdx 22 use pdestCopy 0
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,0), 1 -> (2,-1), 2 -> (2,0), 3 -> (2,-1), 4 -> (2,0), 6 -> (2,0), 22 -> (2,0), 23 -> (2,-1), 24 -> (2,-1))
[Backend] exuIdx 23 be connected, old info (2,-1)
[Backend] exuIdx 23 be connected, new info (2,0)
[Backend] exuIdx 23 use pdestCopy 0
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,0), 1 -> (2,-1), 2 -> (2,0), 3 -> (2,-1), 4 -> (2,0), 6 -> (2,0), 22 -> (2,0), 23 -> (2,0), 24 -> (2,-1))
[Backend] exuIdx 24 be connected, old info (2,-1)
[Backend] exuIdx 24 be connected, new info (2,0)
[Backend] exuIdx 24 use pdestCopy 0
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,0), 1 -> (2,-1), 2 -> (2,0), 3 -> (2,-1), 4 -> (2,0), 6 -> (2,0), 22 -> (2,0), 23 -> (2,0), 24 -> (2,0))
[Backend] exuIdx 0 be connected, old info (2,0)
[Backend] exuIdx 0 be connected, new info (2,1)
[Backend] exuIdx 0 use pdestCopy 0
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,1), 1 -> (2,-1), 2 -> (2,0), 3 -> (2,-1), 4 -> (2,0), 6 -> (2,0), 22 -> (2,0), 23 -> (2,0), 24 -> (2,0))
[Backend] exuIdx 2 be connected, old info (2,0)
[Backend] exuIdx 2 be connected, new info (2,1)
[Backend] exuIdx 2 use pdestCopy 0
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,1), 1 -> (2,-1), 2 -> (2,1), 3 -> (2,-1), 4 -> (2,0), 6 -> (2,0), 22 -> (2,0), 23 -> (2,0), 24 -> (2,0))
[Backend] exuIdx 4 be connected, old info (2,0)
[Backend] exuIdx 4 be connected, new info (2,1)
[Backend] exuIdx 4 use pdestCopy 0
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,1), 1 -> (2,-1), 2 -> (2,1), 3 -> (2,-1), 4 -> (2,1), 6 -> (2,0), 22 -> (2,0), 23 -> (2,0), 24 -> (2,0))
[Backend] exuIdx 6 be connected, old info (2,0)
[Backend] exuIdx 6 be connected, new info (2,1)
[Backend] exuIdx 6 use pdestCopy 0
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,1), 1 -> (2,-1), 2 -> (2,1), 3 -> (2,-1), 4 -> (2,1), 6 -> (2,1), 22 -> (2,0), 23 -> (2,0), 24 -> (2,0))
[Backend] exuIdx 22 be connected, old info (2,0)
[Backend] exuIdx 22 be connected, new info (2,1)
[Backend] exuIdx 22 use pdestCopy 0
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,1), 1 -> (2,-1), 2 -> (2,1), 3 -> (2,-1), 4 -> (2,1), 6 -> (2,1), 22 -> (2,1), 23 -> (2,0), 24 -> (2,0))
[Backend] exuIdx 23 be connected, old info (2,0)
[Backend] exuIdx 23 be connected, new info (2,1)
[Backend] exuIdx 23 use pdestCopy 0
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,1), 1 -> (2,-1), 2 -> (2,1), 3 -> (2,-1), 4 -> (2,1), 6 -> (2,1), 22 -> (2,1), 23 -> (2,1), 24 -> (2,0))
[Backend] exuIdx 24 be connected, old info (2,0)
[Backend] exuIdx 24 be connected, new info (2,1)
[Backend] exuIdx 24 use pdestCopy 0
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,1), 1 -> (2,-1), 2 -> (2,1), 3 -> (2,-1), 4 -> (2,1), 6 -> (2,1), 22 -> (2,1), 23 -> (2,1), 24 -> (2,1))
[Backend] exuIdx 0 be connected, old info (2,1)
[Backend] exuIdx 0 be connected, new info (2,2)
[Backend] exuIdx 0 use pdestCopy 1
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,2), 1 -> (2,-1), 2 -> (2,1), 3 -> (2,-1), 4 -> (2,1), 6 -> (2,1), 22 -> (2,1), 23 -> (2,1), 24 -> (2,1))
[Backend] exuIdx 2 be connected, old info (2,1)
[Backend] exuIdx 2 be connected, new info (2,2)
[Backend] exuIdx 2 use pdestCopy 1
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,2), 1 -> (2,-1), 2 -> (2,2), 3 -> (2,-1), 4 -> (2,1), 6 -> (2,1), 22 -> (2,1), 23 -> (2,1), 24 -> (2,1))
[Backend] exuIdx 4 be connected, old info (2,1)
[Backend] exuIdx 4 be connected, new info (2,2)
[Backend] exuIdx 4 use pdestCopy 1
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,2), 1 -> (2,-1), 2 -> (2,2), 3 -> (2,-1), 4 -> (2,2), 6 -> (2,1), 22 -> (2,1), 23 -> (2,1), 24 -> (2,1))
[Backend] exuIdx 6 be connected, old info (2,1)
[Backend] exuIdx 6 be connected, new info (2,2)
[Backend] exuIdx 6 use pdestCopy 1
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,2), 1 -> (2,-1), 2 -> (2,2), 3 -> (2,-1), 4 -> (2,2), 6 -> (2,2), 22 -> (2,1), 23 -> (2,1), 24 -> (2,1))
[Backend] exuIdx 22 be connected, old info (2,1)
[Backend] exuIdx 22 be connected, new info (2,2)
[Backend] exuIdx 22 use pdestCopy 1
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,2), 1 -> (2,-1), 2 -> (2,2), 3 -> (2,-1), 4 -> (2,2), 6 -> (2,2), 22 -> (2,2), 23 -> (2,1), 24 -> (2,1))
[Backend] exuIdx 23 be connected, old info (2,1)
[Backend] exuIdx 23 be connected, new info (2,2)
[Backend] exuIdx 23 use pdestCopy 1
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,2), 1 -> (2,-1), 2 -> (2,2), 3 -> (2,-1), 4 -> (2,2), 6 -> (2,2), 22 -> (2,2), 23 -> (2,2), 24 -> (2,1))
[Backend] exuIdx 24 be connected, old info (2,1)
[Backend] exuIdx 24 be connected, new info (2,2)
[Backend] exuIdx 24 use pdestCopy 1
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,2), 1 -> (2,-1), 2 -> (2,2), 3 -> (2,-1), 4 -> (2,2), 6 -> (2,2), 22 -> (2,2), 23 -> (2,2), 24 -> (2,2))
[Backend] exuIdx 0 be connected, old info (2,2)
[Backend] exuIdx 0 be connected, new info (2,3)
[Backend] exuIdx 0 use pdestCopy 1
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,2), 3 -> (2,-1), 4 -> (2,2), 6 -> (2,2), 22 -> (2,2), 23 -> (2,2), 24 -> (2,2))
[Backend] exuIdx 2 be connected, old info (2,2)
[Backend] exuIdx 2 be connected, new info (2,3)
[Backend] exuIdx 2 use pdestCopy 1
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,2), 6 -> (2,2), 22 -> (2,2), 23 -> (2,2), 24 -> (2,2))
[Backend] exuIdx 4 be connected, old info (2,2)
[Backend] exuIdx 4 be connected, new info (2,3)
[Backend] exuIdx 4 use pdestCopy 1
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,2), 22 -> (2,2), 23 -> (2,2), 24 -> (2,2))
[Backend] exuIdx 6 be connected, old info (2,2)
[Backend] exuIdx 6 be connected, new info (2,3)
[Backend] exuIdx 6 use pdestCopy 1
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,2), 23 -> (2,2), 24 -> (2,2))
[Backend] exuIdx 22 be connected, old info (2,2)
[Backend] exuIdx 22 be connected, new info (2,3)
[Backend] exuIdx 22 use pdestCopy 1
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,3), 23 -> (2,2), 24 -> (2,2))
[Backend] exuIdx 23 be connected, old info (2,2)
[Backend] exuIdx 23 be connected, new info (2,3)
[Backend] exuIdx 23 use pdestCopy 1
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,3), 23 -> (2,3), 24 -> (2,2))
[Backend] exuIdx 24 be connected, old info (2,2)
[Backend] exuIdx 24 be connected, new info (2,3)
[Backend] exuIdx 24 use pdestCopy 1
[Scheduler] io.fromSchedulers.wakeupVec: Vector(ALU0, ALU1, ALU2, ALU3, LDU0, LDU1, LDU2)
[Scheduler] iqWakeUpInKeys: Set(0, 24, 6, 2, 22, 23, 4)
[Scheduler] iqWakeUpOutKeys: Set(0, 5, 1, 6, 2, 7, 3, 4)
[Scheduler] io.toSchedulers.wakeupVec: Vector(ALU0, ALU1, ALU2, ALU3)
[SchedulerArithImp] has intBusyTable: true, has vfBusyTable: false
[Dispatch2IqArithImp] portFuSets: List(Set(falu, fcvt, f2v, fmac), Set(falu, fmac), Set(fDivSqrt))
[Dispatch2IqArithImp] fuDeqMap: HashMap(fDivSqrt -> List(2), fcvt -> List(0), fmac -> List(0, 1), falu -> List(0, 1), f2v -> List(0))
[Dispatch2IqArithImp] mergedFuDeqMap: HashMap(List(fcvt, f2v) -> List(0), List(fDivSqrt) -> List(2), List(fmac, falu) -> List(0, 1))
[Dispatch2IqArithImp] expendedFuDeqMap: HashMap(List(fcvt, f2v) -> List(0, 1), List(fDivSqrt) -> List(4, 5), List(fmac, falu) -> List(0, 1, 2, 3))
[Dispatch2IqArithImp] finalFuDeqMap: List((List(fcvt, f2v),List(0, 1)), (List(fDivSqrt),List(4, 5)), (List(fmac, falu),List(0, 1, 2, 3)))
[Dispatch2IQ] portSelIdxOH: Map(List(0, 1) -> Dispatch2Iq_1.selIdxOH.0: Wire[Valid[2]], List(4, 5) -> Dispatch2Iq_1.selIdxOH.1: Wire[Valid[2]], List(0, 1, 2, 3) -> Dispatch2Iq_1.selIdxOH.2: Wire[Valid[4]])
[Dispatch2IQ] finalportSelIdxOH: HashMap(0 -> List(Dispatch2Iq_1.selIdxOH.0[0]: Wire[Valid], Dispatch2Iq_1.selIdxOH.2[0]: Wire[Valid]), 1 -> List(Dispatch2Iq_1.selIdxOH.0[1]: Wire[Valid], Dispatch2Iq_1.selIdxOH.2[1]: Wire[Valid]), 2 -> List(Dispatch2Iq_1.selIdxOH.2[2]: Wire[Valid]), 3 -> List(Dispatch2Iq_1.selIdxOH.2[3]: Wire[Valid]), 4 -> List(Dispatch2Iq_1.selIdxOH.1[0]: Wire[Valid]), 5 -> List(Dispatch2Iq_1.selIdxOH.1[1]: Wire[Valid]))
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[IssueQueueImp] IssueQueueFaluFcvtF2vFmac wakeupFromWB(2), wakeup exu in(7): {FEX0,FEX1,FEX2,FEX3,LDU0,LDU1,LDU2}, wakeup exu out(2): {FEX0,FEX1}, numEntries: 8, numRegSrc: 3, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueFaluFcvtF2vFmac fuLatencyMaps: List(Map(falu -> 1, fcvt -> 2, f2v -> 0), Map(fmac -> 3))
[IssueQueueImp] IssueQueueFaluFcvtF2vFmac commonFuCfgs: List()
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[IssueQueueImp] IssueQueueFaluFmac wakeupFromWB(2), wakeup exu in(7): {FEX0,FEX1,FEX2,FEX3,LDU0,LDU1,LDU2}, wakeup exu out(2): {FEX2,FEX3}, numEntries: 8, numRegSrc: 3, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueFaluFmac fuLatencyMaps: List(Map(falu -> 1), Map(fmac -> 3))
[IssueQueueImp] IssueQueueFaluFmac commonFuCfgs: List()
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 12 numWakeupIQ 0
[Backend] exuIdx 13 numWakeupIQ 0
[IssueQueueImp] IssueQueueFdiv wakeupFromWB(2), wakeup exu in(7): {FEX0,FEX1,FEX2,FEX3,LDU0,LDU1,LDU2}, wakeup exu out(0): {}, numEntries: 8, numRegSrc: 2, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueFdiv fuLatencyMaps: List(Map(), Map())
[IssueQueueImp] IssueQueueFdiv commonFuCfgs: List(fdiv)
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] Connect wakeup exuIdx 8
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,3), 23 -> (2,3), 24 -> (2,3))
[Backend] Connect wakeup exuIdx 9
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,3), 23 -> (2,3), 24 -> (2,3))
[Backend] Connect wakeup exuIdx 10
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,3), 23 -> (2,3), 24 -> (2,3))
[Backend] Connect wakeup exuIdx 11
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,3), 23 -> (2,3), 24 -> (2,3))
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,3), 23 -> (2,3), 24 -> (2,3))
[Backend] exuIdx 22 be connected, old info (2,3)
[Backend] exuIdx 22 be connected, new info (2,4)
[Backend] exuIdx 22 use pdestCopy 2
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,4), 23 -> (2,3), 24 -> (2,3))
[Backend] exuIdx 23 be connected, old info (2,3)
[Backend] exuIdx 23 be connected, new info (2,4)
[Backend] exuIdx 23 use pdestCopy 2
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,4), 23 -> (2,4), 24 -> (2,3))
[Backend] exuIdx 24 be connected, old info (2,3)
[Backend] exuIdx 24 be connected, new info (2,4)
[Backend] exuIdx 24 use pdestCopy 2
[Backend] Connect wakeup exuIdx 8
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,4), 23 -> (2,4), 24 -> (2,4))
[Backend] Connect wakeup exuIdx 9
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,4), 23 -> (2,4), 24 -> (2,4))
[Backend] Connect wakeup exuIdx 10
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,4), 23 -> (2,4), 24 -> (2,4))
[Backend] Connect wakeup exuIdx 11
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,4), 23 -> (2,4), 24 -> (2,4))
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,4), 23 -> (2,4), 24 -> (2,4))
[Backend] exuIdx 22 be connected, old info (2,4)
[Backend] exuIdx 22 be connected, new info (2,5)
[Backend] exuIdx 22 use pdestCopy 2
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,5), 23 -> (2,4), 24 -> (2,4))
[Backend] exuIdx 23 be connected, old info (2,4)
[Backend] exuIdx 23 be connected, new info (2,5)
[Backend] exuIdx 23 use pdestCopy 2
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,5), 23 -> (2,5), 24 -> (2,4))
[Backend] exuIdx 24 be connected, old info (2,4)
[Backend] exuIdx 24 be connected, new info (2,5)
[Backend] exuIdx 24 use pdestCopy 2
[Backend] Connect wakeup exuIdx 8
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,5), 23 -> (2,5), 24 -> (2,5))
[Backend] Connect wakeup exuIdx 9
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,5), 23 -> (2,5), 24 -> (2,5))
[Backend] Connect wakeup exuIdx 10
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,5), 23 -> (2,5), 24 -> (2,5))
[Backend] Connect wakeup exuIdx 11
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,5), 23 -> (2,5), 24 -> (2,5))
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,5), 23 -> (2,5), 24 -> (2,5))
[Backend] exuIdx 22 be connected, old info (2,5)
[Backend] exuIdx 22 be connected, new info (2,6)
[Backend] exuIdx 22 use pdestCopy 3
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,5), 24 -> (2,5))
[Backend] exuIdx 23 be connected, old info (2,5)
[Backend] exuIdx 23 be connected, new info (2,6)
[Backend] exuIdx 23 use pdestCopy 3
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,5))
[Backend] exuIdx 24 be connected, old info (2,5)
[Backend] exuIdx 24 be connected, new info (2,6)
[Backend] exuIdx 24 use pdestCopy 3
[Scheduler] io.fromSchedulers.wakeupVec: Vector(FEX0, FEX1, FEX2, FEX3, LDU0, LDU1, LDU2)
[Scheduler] iqWakeUpInKeys: Set(10, 24, 9, 22, 11, 23, 8)
[Scheduler] iqWakeUpOutKeys: Set(10, 9, 13, 12, 11, 8)
[Scheduler] io.toSchedulers.wakeupVec: Vector(FEX0, FEX1, FEX2, FEX3)
[SchedulerArithImp] has intBusyTable: false, has vfBusyTable: false
[Dispatch2IqArithImp] portFuSets: List(HashSet(vppu, vimac, vfcvt, vipu, vfalu, vfma, vsetfwf, vialuF), Set(vfma, vialuF, vfalu, vfcvt), Set(vfdiv, vidiv))
[Dispatch2IqArithImp] fuDeqMap: HashMap(vppu -> List(0), vimac -> List(0), vipu -> List(0), vfdiv -> List(2), vfalu -> List(0, 1), vfma -> List(0, 1), vidiv -> List(2), vfcvt -> List(0, 1), vsetfwf -> List(0), vialuF -> List(0, 1))
[Dispatch2IqArithImp] mergedFuDeqMap: HashMap(List(vppu, vimac, vipu, vsetfwf) -> List(0), List(vfdiv, vidiv) -> List(2), List(vfalu, vfma, vfcvt, vialuF) -> List(0, 1))
[Dispatch2IqArithImp] expendedFuDeqMap: HashMap(List(vppu, vimac, vipu, vsetfwf) -> List(0, 1), List(vfdiv, vidiv) -> List(4, 5), List(vfalu, vfma, vfcvt, vialuF) -> List(0, 1, 2, 3))
[Dispatch2IqArithImp] finalFuDeqMap: List((List(vppu, vimac, vipu, vsetfwf),List(0, 1)), (List(vfdiv, vidiv),List(4, 5)), (List(vfalu, vfma, vfcvt, vialuF),List(0, 1, 2, 3)))
[Dispatch2IQ] portSelIdxOH: Map(List(0, 1) -> Dispatch2Iq_2.selIdxOH.0: Wire[Valid[2]], List(4, 5) -> Dispatch2Iq_2.selIdxOH.1: Wire[Valid[2]], List(0, 1, 2, 3) -> Dispatch2Iq_2.selIdxOH.2: Wire[Valid[4]])
[Dispatch2IQ] finalportSelIdxOH: HashMap(0 -> List(Dispatch2Iq_2.selIdxOH.0[0]: Wire[Valid], Dispatch2Iq_2.selIdxOH.2[0]: Wire[Valid]), 1 -> List(Dispatch2Iq_2.selIdxOH.0[1]: Wire[Valid], Dispatch2Iq_2.selIdxOH.2[1]: Wire[Valid]), 2 -> List(Dispatch2Iq_2.selIdxOH.2[2]: Wire[Valid]), 3 -> List(Dispatch2Iq_2.selIdxOH.2[3]: Wire[Valid]), 4 -> List(Dispatch2Iq_2.selIdxOH.1[0]: Wire[Valid]), 5 -> List(Dispatch2Iq_2.selIdxOH.1[1]: Wire[Valid]))
[Backend] exuIdx 14 numWakeupIQ 3
[Backend] exuIdx 15 numWakeupIQ 3
[IssueQueueImp] IssueQueueVfmaVialuFixVimacVppuVfaluVfcvtVipuVsetrvfwvf wakeupFromWB(5), wakeup exu in(4): {VFEX0,VFEX1,VFEX2,VFEX3}, wakeup exu out(2): {VFEX0,VFEX1}, numEntries: 8, numRegSrc: 5, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueVfmaVialuFixVimacVppuVfaluVfcvtVipuVsetrvfwvf fuLatencyMaps: List(Map(vfma -> 3, vialuF -> 1, vimac -> 2, vppu -> 2), Map(vfalu -> 1, vfcvt -> 2, vipu -> 2, vsetfwf -> 0))
[IssueQueueImp] IssueQueueVfmaVialuFixVimacVppuVfaluVfcvtVipuVsetrvfwvf commonFuCfgs: List()
[Backend] exuIdx 14 numWakeupIQ 3
[Backend] exuIdx 15 numWakeupIQ 3
[Backend] exuIdx 16 numWakeupIQ 3
[Backend] exuIdx 17 numWakeupIQ 3
[IssueQueueImp] IssueQueueVfmaVialuFixVfaluVfcvt wakeupFromWB(5), wakeup exu in(4): {VFEX0,VFEX1,VFEX2,VFEX3}, wakeup exu out(2): {VFEX2,VFEX3}, numEntries: 8, numRegSrc: 5, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueVfmaVialuFixVfaluVfcvt fuLatencyMaps: List(Map(vfma -> 3, vialuF -> 1), Map(vfalu -> 1, vfcvt -> 2))
[IssueQueueImp] IssueQueueVfmaVialuFixVfaluVfcvt commonFuCfgs: List()
[Backend] exuIdx 16 numWakeupIQ 3
[Backend] exuIdx 17 numWakeupIQ 3
[Backend] exuIdx 18 numWakeupIQ 0
[Backend] exuIdx 19 numWakeupIQ 0
[IssueQueueImp] IssueQueueVfdivVidiv wakeupFromWB(5), wakeup exu in(4): {VFEX0,VFEX1,VFEX2,VFEX3}, wakeup exu out(0): {}, numEntries: 8, numRegSrc: 5, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 2, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueVfdivVidiv fuLatencyMaps: List(Map(), Map())
[IssueQueueImp] IssueQueueVfdivVidiv commonFuCfgs: List(vidiv, vfdiv)
[Backend] exuIdx 14 numWakeupIQ 3
[Backend] exuIdx 15 numWakeupIQ 3
[Backend] exuIdx 16 numWakeupIQ 3
[Backend] exuIdx 17 numWakeupIQ 3
[Backend] exuIdx 14 numWakeupIQ 3
[Backend] exuIdx 15 numWakeupIQ 3
[Backend] exuIdx 16 numWakeupIQ 3
[Backend] exuIdx 17 numWakeupIQ 3
[Backend] exuIdx 14 numWakeupIQ 3
[Backend] exuIdx 15 numWakeupIQ 3
[Backend] exuIdx 16 numWakeupIQ 3
[Backend] exuIdx 17 numWakeupIQ 3
[Backend] Connect wakeup exuIdx 14
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 15
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 16
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 17
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 14
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 15
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 16
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 17
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 14
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 15
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 16
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] Connect wakeup exuIdx 17
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Scheduler] io.fromSchedulers.wakeupVec: Vector(VFEX0, VFEX1, VFEX2, VFEX3)
[Scheduler] iqWakeUpInKeys: Set(14, 15, 16, 17)
[Scheduler] iqWakeUpOutKeys: Set(14, 17, 18, 16, 19, 15)
[Scheduler] io.toSchedulers.wakeupVec: Vector(VFEX0, VFEX1, VFEX2, VFEX3)
[SchedulerArithImp] has intBusyTable: false, has vfBusyTable: true
[Dispatch2IqMemImp] portFuSets: List(Set(stu, mou), Set(stu, mou), Set(ldu), Set(ldu), Set(ldu), Set(vldu, vstu), Set(), Set())
[Dispatch2IqMemImp] fuDeqMap: HashMap(ldu -> List(2, 3, 4), vstu -> List(5), mou -> List(0, 1), stu -> List(0, 1), vldu -> List(5))
[Dispatch2IqMemImp] mergedFuDeqMap: HashMap(List(mou, stu) -> List(0, 1), List(ldu) -> List(2, 3, 4), List(vstu, vldu) -> List(5))
[Dispatch2IqMemImp] expendedFuDeqMap: HashMap(List(mou, stu) -> List(0, 1, 2, 3), List(ldu) -> List(4, 5, 6, 7, 8, 9), List(vstu, vldu) -> List(10, 11))
[Dispatch2IqMemImp] finalFuDeqMap: List((List(vstu, vldu),List(10, 11)), (List(mou, stu),List(0, 1, 2, 3)), (List(ldu),List(4, 5, 6, 7, 8, 9)))
Constantin initRead: hyuPriorityAddCtr = 2
Constantin initRead: hyuPriorityAddCtr = 2
Constantin initRead: hyuPriorityAddCtr = 2
Constantin initRead: hyuPriorityAddCtr = 2
Constantin initRead: hyuPriorityAddCtr = 2
Constantin initRead: hyuPriorityAddCtr = 2
Constantin initRead: hyuPrioritySubCtr = 5
Constantin initRead: hyuPrioritySubCtr = 5
Constantin initRead: hyuPrioritySubCtr = 5
Constantin initRead: hyuPrioritySubCtr = 5
Constantin initRead: hyuPrioritySubCtr = 5
Constantin initRead: hyuPrioritySubCtr = 5
List(0, 2, 1, 3)
List(0, 1, 2, 3)
List(0, 1, 2, 3)
List(0, 1, 2, 3)
Constantin initRead: enableLoadBalance = 1
Constantin initRead: enableStoreBalance = 1
[Dispatch2IQ] portSelIdxOH: Map(List(10, 11) -> Dispatch2Iq_3.selIdxOH.0: Wire[Valid[2]], List(0, 1, 2, 3) -> Dispatch2Iq_3.selIdxOH.1: Wire[Valid[4]], List(4, 5, 6, 7, 8, 9) -> Dispatch2Iq_3.selIdxOH.2: Wire[Valid[6]])
[Dispatch2IQ] finalportSelIdxOH: HashMap(0 -> List(Dispatch2Iq_3.selIdxOH.1[0]: Wire[Valid]), 1 -> List(Dispatch2Iq_3.selIdxOH.1[1]: Wire[Valid]), 2 -> List(Dispatch2Iq_3.selIdxOH.1[2]: Wire[Valid]), 3 -> List(Dispatch2Iq_3.selIdxOH.1[3]: Wire[Valid]), 4 -> List(Dispatch2Iq_3.selIdxOH.2[0]: Wire[Valid]), 5 -> List(Dispatch2Iq_3.selIdxOH.2[1]: Wire[Valid]), 6 -> List(Dispatch2Iq_3.selIdxOH.2[2]: Wire[Valid]), 7 -> List(Dispatch2Iq_3.selIdxOH.2[3]: Wire[Valid]), 8 -> List(Dispatch2Iq_3.selIdxOH.2[4]: Wire[Valid]), 9 -> List(Dispatch2Iq_3.selIdxOH.2[5]: Wire[Valid]), 10 -> List(Dispatch2Iq_3.selIdxOH.0[0]: Wire[Valid]), 11 -> List(Dispatch2Iq_3.selIdxOH.0[1]: Wire[Valid]))
[Backend] exuIdx 20 numWakeupIQ 0
[IssueQueueImp] IssueQueueStaMou wakeupFromWB(18), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(0): {}, numEntries: 8, numRegSrc: 1, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueStaMou fuLatencyMaps: List(Map())
[IssueQueueImp] IssueQueueStaMou commonFuCfgs: List()
[IssueQueueMemAddrImp] StdCnt: 0, LduCnt: 0, StaCnt: 1, HyuCnt: 0
[Backend] exuIdx 21 numWakeupIQ 0
[IssueQueueImp] IssueQueueStaMou wakeupFromWB(18), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(0): {}, numEntries: 8, numRegSrc: 1, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueStaMou fuLatencyMaps: List(Map())
[IssueQueueImp] IssueQueueStaMou commonFuCfgs: List()
[IssueQueueMemAddrImp] StdCnt: 0, LduCnt: 0, StaCnt: 1, HyuCnt: 0
[Backend] exuIdx 22 numWakeupIQ 14
[IssueQueueImp] IssueQueueLdu wakeupFromWB(18), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(1): {LDU0}, numEntries: 8, numRegSrc: 1, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueLdu fuLatencyMaps: List(Map(ldu -> 3))
[IssueQueueImp] IssueQueueLdu commonFuCfgs: List()
[IssueQueueMemAddrImp] StdCnt: 0, LduCnt: 1, StaCnt: 0, HyuCnt: 0
[Backend] exuIdx 23 numWakeupIQ 14
[IssueQueueImp] IssueQueueLdu wakeupFromWB(18), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(1): {LDU1}, numEntries: 8, numRegSrc: 1, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueLdu fuLatencyMaps: List(Map(ldu -> 3))
[IssueQueueImp] IssueQueueLdu commonFuCfgs: List()
[IssueQueueMemAddrImp] StdCnt: 0, LduCnt: 1, StaCnt: 0, HyuCnt: 0
[Backend] exuIdx 24 numWakeupIQ 14
[IssueQueueImp] IssueQueueLdu wakeupFromWB(18), wakeup exu in(7): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2}, wakeup exu out(1): {LDU2}, numEntries: 8, numRegSrc: 1, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueLdu fuLatencyMaps: List(Map(ldu -> 3))
[IssueQueueImp] IssueQueueLdu commonFuCfgs: List()
[IssueQueueMemAddrImp] StdCnt: 0, LduCnt: 1, StaCnt: 0, HyuCnt: 0
[Backend] exuIdx 25 numWakeupIQ 0
[IssueQueueImp] IssueQueueVlduVstu wakeupFromWB(24), wakeup exu in(0): {}, wakeup exu out(0): {}, numEntries: 8, numRegSrc: 5, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueVlduVstu fuLatencyMaps: List(Map())
[IssueQueueImp] IssueQueueVlduVstu commonFuCfgs: List()
[IssueQueueVecMemImp] VlduCnt: 1, VstuCnt: 1
[Backend] exuIdx 26 numWakeupIQ 0
[IssueQueueImp] IssueQueueStdMoud wakeupFromWB(13), wakeup exu in(11): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2,FEX0,FEX1,FEX2,FEX3}, wakeup exu out(0): {}, numEntries: 8, numRegSrc: 1, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueStdMoud fuLatencyMaps: List(Map())
[IssueQueueImp] IssueQueueStdMoud commonFuCfgs: List()
[Backend] exuIdx 27 numWakeupIQ 0
[IssueQueueImp] IssueQueueStdMoud wakeupFromWB(13), wakeup exu in(11): {ALU0,ALU1,ALU2,ALU3,LDU0,LDU1,LDU2,FEX0,FEX1,FEX2,FEX3}, wakeup exu out(0): {}, numEntries: 8, numRegSrc: 1, numEnq: 2, numSimp: 2, numComp: 4, numDeq: 1, isAllSimp: false, isAllComp: false
[IssueQueueImp] IssueQueueStdMoud fuLatencyMaps: List(Map())
[IssueQueueImp] IssueQueueStdMoud commonFuCfgs: List()
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] exuIdx 0 numWakeupIQ 11
[Backend] exuIdx 2 numWakeupIQ 11
[Backend] exuIdx 4 numWakeupIQ 11
[Backend] exuIdx 6 numWakeupIQ 11
[Backend] exuIdx 22 numWakeupIQ 14
[Backend] exuIdx 23 numWakeupIQ 14
[Backend] exuIdx 24 numWakeupIQ 14
[Backend] exuIdx 8 numWakeupIQ 5
[Backend] exuIdx 9 numWakeupIQ 5
[Backend] exuIdx 10 numWakeupIQ 5
[Backend] exuIdx 11 numWakeupIQ 5
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,3), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] exuIdx 0 be connected, old info (2,3)
[Backend] exuIdx 0 be connected, new info (2,4)
[Backend] exuIdx 0 use pdestCopy 2
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,4), 1 -> (2,-1), 2 -> (2,3), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] exuIdx 2 be connected, old info (2,3)
[Backend] exuIdx 2 be connected, new info (2,4)
[Backend] exuIdx 2 use pdestCopy 2
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,4), 1 -> (2,-1), 2 -> (2,4), 3 -> (2,-1), 4 -> (2,3), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] exuIdx 4 be connected, old info (2,3)
[Backend] exuIdx 4 be connected, new info (2,4)
[Backend] exuIdx 4 use pdestCopy 2
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,4), 1 -> (2,-1), 2 -> (2,4), 3 -> (2,-1), 4 -> (2,4), 6 -> (2,3), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] exuIdx 6 be connected, old info (2,3)
[Backend] exuIdx 6 be connected, new info (2,4)
[Backend] exuIdx 6 use pdestCopy 2
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,4), 1 -> (2,-1), 2 -> (2,4), 3 -> (2,-1), 4 -> (2,4), 6 -> (2,4), 22 -> (2,6), 23 -> (2,6), 24 -> (2,6))
[Backend] exuIdx 22 be connected, old info (2,6)
[Backend] exuIdx 22 be connected, new info (2,7)
[Backend] exuIdx 22 use pdestCopy 3
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,4), 1 -> (2,-1), 2 -> (2,4), 3 -> (2,-1), 4 -> (2,4), 6 -> (2,4), 22 -> (2,7), 23 -> (2,6), 24 -> (2,6))
[Backend] exuIdx 23 be connected, old info (2,6)
[Backend] exuIdx 23 be connected, new info (2,7)
[Backend] exuIdx 23 use pdestCopy 3
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,4), 1 -> (2,-1), 2 -> (2,4), 3 -> (2,-1), 4 -> (2,4), 6 -> (2,4), 22 -> (2,7), 23 -> (2,7), 24 -> (2,6))
[Backend] exuIdx 24 be connected, old info (2,6)
[Backend] exuIdx 24 be connected, new info (2,7)
[Backend] exuIdx 24 use pdestCopy 3
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,4), 1 -> (2,-1), 2 -> (2,4), 3 -> (2,-1), 4 -> (2,4), 6 -> (2,4), 22 -> (2,7), 23 -> (2,7), 24 -> (2,7))
[Backend] exuIdx 0 be connected, old info (2,4)
[Backend] exuIdx 0 be connected, new info (2,5)
[Backend] exuIdx 0 use pdestCopy 2
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,5), 1 -> (2,-1), 2 -> (2,4), 3 -> (2,-1), 4 -> (2,4), 6 -> (2,4), 22 -> (2,7), 23 -> (2,7), 24 -> (2,7))
[Backend] exuIdx 2 be connected, old info (2,4)
[Backend] exuIdx 2 be connected, new info (2,5)
[Backend] exuIdx 2 use pdestCopy 2
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,5), 1 -> (2,-1), 2 -> (2,5), 3 -> (2,-1), 4 -> (2,4), 6 -> (2,4), 22 -> (2,7), 23 -> (2,7), 24 -> (2,7))
[Backend] exuIdx 4 be connected, old info (2,4)
[Backend] exuIdx 4 be connected, new info (2,5)
[Backend] exuIdx 4 use pdestCopy 2
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,5), 1 -> (2,-1), 2 -> (2,5), 3 -> (2,-1), 4 -> (2,5), 6 -> (2,4), 22 -> (2,7), 23 -> (2,7), 24 -> (2,7))
[Backend] exuIdx 6 be connected, old info (2,4)
[Backend] exuIdx 6 be connected, new info (2,5)
[Backend] exuIdx 6 use pdestCopy 2
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,5), 1 -> (2,-1), 2 -> (2,5), 3 -> (2,-1), 4 -> (2,5), 6 -> (2,5), 22 -> (2,7), 23 -> (2,7), 24 -> (2,7))
[Backend] exuIdx 22 be connected, old info (2,7)
[Backend] exuIdx 22 be connected, new info (2,8)
[Backend] exuIdx 22 use pdestCopy 4
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,5), 1 -> (2,-1), 2 -> (2,5), 3 -> (2,-1), 4 -> (2,5), 6 -> (2,5), 22 -> (2,8), 23 -> (2,7), 24 -> (2,7))
[Backend] exuIdx 23 be connected, old info (2,7)
[Backend] exuIdx 23 be connected, new info (2,8)
[Backend] exuIdx 23 use pdestCopy 4
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,5), 1 -> (2,-1), 2 -> (2,5), 3 -> (2,-1), 4 -> (2,5), 6 -> (2,5), 22 -> (2,8), 23 -> (2,8), 24 -> (2,7))
[Backend] exuIdx 24 be connected, old info (2,7)
[Backend] exuIdx 24 be connected, new info (2,8)
[Backend] exuIdx 24 use pdestCopy 4
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,5), 1 -> (2,-1), 2 -> (2,5), 3 -> (2,-1), 4 -> (2,5), 6 -> (2,5), 22 -> (2,8), 23 -> (2,8), 24 -> (2,8))
[Backend] exuIdx 0 be connected, old info (2,5)
[Backend] exuIdx 0 be connected, new info (2,6)
[Backend] exuIdx 0 use pdestCopy 3
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,6), 1 -> (2,-1), 2 -> (2,5), 3 -> (2,-1), 4 -> (2,5), 6 -> (2,5), 22 -> (2,8), 23 -> (2,8), 24 -> (2,8))
[Backend] exuIdx 2 be connected, old info (2,5)
[Backend] exuIdx 2 be connected, new info (2,6)
[Backend] exuIdx 2 use pdestCopy 3
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,6), 1 -> (2,-1), 2 -> (2,6), 3 -> (2,-1), 4 -> (2,5), 6 -> (2,5), 22 -> (2,8), 23 -> (2,8), 24 -> (2,8))
[Backend] exuIdx 4 be connected, old info (2,5)
[Backend] exuIdx 4 be connected, new info (2,6)
[Backend] exuIdx 4 use pdestCopy 3
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,6), 1 -> (2,-1), 2 -> (2,6), 3 -> (2,-1), 4 -> (2,6), 6 -> (2,5), 22 -> (2,8), 23 -> (2,8), 24 -> (2,8))
[Backend] exuIdx 6 be connected, old info (2,5)
[Backend] exuIdx 6 be connected, new info (2,6)
[Backend] exuIdx 6 use pdestCopy 3
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,6), 1 -> (2,-1), 2 -> (2,6), 3 -> (2,-1), 4 -> (2,6), 6 -> (2,6), 22 -> (2,8), 23 -> (2,8), 24 -> (2,8))
[Backend] exuIdx 22 be connected, old info (2,8)
[Backend] exuIdx 22 be connected, new info (2,9)
[Backend] exuIdx 22 use pdestCopy 4
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,6), 1 -> (2,-1), 2 -> (2,6), 3 -> (2,-1), 4 -> (2,6), 6 -> (2,6), 22 -> (2,9), 23 -> (2,8), 24 -> (2,8))
[Backend] exuIdx 23 be connected, old info (2,8)
[Backend] exuIdx 23 be connected, new info (2,9)
[Backend] exuIdx 23 use pdestCopy 4
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,6), 1 -> (2,-1), 2 -> (2,6), 3 -> (2,-1), 4 -> (2,6), 6 -> (2,6), 22 -> (2,9), 23 -> (2,9), 24 -> (2,8))
[Backend] exuIdx 24 be connected, old info (2,8)
[Backend] exuIdx 24 be connected, new info (2,9)
[Backend] exuIdx 24 use pdestCopy 4
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,6), 1 -> (2,-1), 2 -> (2,6), 3 -> (2,-1), 4 -> (2,6), 6 -> (2,6), 22 -> (2,9), 23 -> (2,9), 24 -> (2,9))
[Backend] exuIdx 0 be connected, old info (2,6)
[Backend] exuIdx 0 be connected, new info (2,7)
[Backend] exuIdx 0 use pdestCopy 3
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,7), 1 -> (2,-1), 2 -> (2,6), 3 -> (2,-1), 4 -> (2,6), 6 -> (2,6), 22 -> (2,9), 23 -> (2,9), 24 -> (2,9))
[Backend] exuIdx 2 be connected, old info (2,6)
[Backend] exuIdx 2 be connected, new info (2,7)
[Backend] exuIdx 2 use pdestCopy 3
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,7), 1 -> (2,-1), 2 -> (2,7), 3 -> (2,-1), 4 -> (2,6), 6 -> (2,6), 22 -> (2,9), 23 -> (2,9), 24 -> (2,9))
[Backend] exuIdx 4 be connected, old info (2,6)
[Backend] exuIdx 4 be connected, new info (2,7)
[Backend] exuIdx 4 use pdestCopy 3
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,7), 1 -> (2,-1), 2 -> (2,7), 3 -> (2,-1), 4 -> (2,7), 6 -> (2,6), 22 -> (2,9), 23 -> (2,9), 24 -> (2,9))
[Backend] exuIdx 6 be connected, old info (2,6)
[Backend] exuIdx 6 be connected, new info (2,7)
[Backend] exuIdx 6 use pdestCopy 3
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,7), 1 -> (2,-1), 2 -> (2,7), 3 -> (2,-1), 4 -> (2,7), 6 -> (2,7), 22 -> (2,9), 23 -> (2,9), 24 -> (2,9))
[Backend] exuIdx 22 be connected, old info (2,9)
[Backend] exuIdx 22 be connected, new info (2,10)
[Backend] exuIdx 22 use pdestCopy 5
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,7), 1 -> (2,-1), 2 -> (2,7), 3 -> (2,-1), 4 -> (2,7), 6 -> (2,7), 22 -> (2,10), 23 -> (2,9), 24 -> (2,9))
[Backend] exuIdx 23 be connected, old info (2,9)
[Backend] exuIdx 23 be connected, new info (2,10)
[Backend] exuIdx 23 use pdestCopy 5
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,7), 1 -> (2,-1), 2 -> (2,7), 3 -> (2,-1), 4 -> (2,7), 6 -> (2,7), 22 -> (2,10), 23 -> (2,10), 24 -> (2,9))
[Backend] exuIdx 24 be connected, old info (2,9)
[Backend] exuIdx 24 be connected, new info (2,10)
[Backend] exuIdx 24 use pdestCopy 5
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,7), 1 -> (2,-1), 2 -> (2,7), 3 -> (2,-1), 4 -> (2,7), 6 -> (2,7), 22 -> (2,10), 23 -> (2,10), 24 -> (2,10))
[Backend] exuIdx 0 be connected, old info (2,7)
[Backend] exuIdx 0 be connected, new info (2,8)
[Backend] exuIdx 0 use pdestCopy 4
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,8), 1 -> (2,-1), 2 -> (2,7), 3 -> (2,-1), 4 -> (2,7), 6 -> (2,7), 22 -> (2,10), 23 -> (2,10), 24 -> (2,10))
[Backend] exuIdx 2 be connected, old info (2,7)
[Backend] exuIdx 2 be connected, new info (2,8)
[Backend] exuIdx 2 use pdestCopy 4
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,8), 1 -> (2,-1), 2 -> (2,8), 3 -> (2,-1), 4 -> (2,7), 6 -> (2,7), 22 -> (2,10), 23 -> (2,10), 24 -> (2,10))
[Backend] exuIdx 4 be connected, old info (2,7)
[Backend] exuIdx 4 be connected, new info (2,8)
[Backend] exuIdx 4 use pdestCopy 4
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,8), 1 -> (2,-1), 2 -> (2,8), 3 -> (2,-1), 4 -> (2,8), 6 -> (2,7), 22 -> (2,10), 23 -> (2,10), 24 -> (2,10))
[Backend] exuIdx 6 be connected, old info (2,7)
[Backend] exuIdx 6 be connected, new info (2,8)
[Backend] exuIdx 6 use pdestCopy 4
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,8), 1 -> (2,-1), 2 -> (2,8), 3 -> (2,-1), 4 -> (2,8), 6 -> (2,8), 22 -> (2,10), 23 -> (2,10), 24 -> (2,10))
[Backend] exuIdx 22 be connected, old info (2,10)
[Backend] exuIdx 22 be connected, new info (2,11)
[Backend] exuIdx 22 use pdestCopy 5
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,8), 1 -> (2,-1), 2 -> (2,8), 3 -> (2,-1), 4 -> (2,8), 6 -> (2,8), 22 -> (2,11), 23 -> (2,10), 24 -> (2,10))
[Backend] exuIdx 23 be connected, old info (2,10)
[Backend] exuIdx 23 be connected, new info (2,11)
[Backend] exuIdx 23 use pdestCopy 5
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,8), 1 -> (2,-1), 2 -> (2,8), 3 -> (2,-1), 4 -> (2,8), 6 -> (2,8), 22 -> (2,11), 23 -> (2,11), 24 -> (2,10))
[Backend] exuIdx 24 be connected, old info (2,10)
[Backend] exuIdx 24 be connected, new info (2,11)
[Backend] exuIdx 24 use pdestCopy 5
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,8), 1 -> (2,-1), 2 -> (2,8), 3 -> (2,-1), 4 -> (2,8), 6 -> (2,8), 22 -> (2,11), 23 -> (2,11), 24 -> (2,11))
[Backend] exuIdx 0 be connected, old info (2,8)
[Backend] exuIdx 0 be connected, new info (2,9)
[Backend] exuIdx 0 use pdestCopy 4
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,8), 3 -> (2,-1), 4 -> (2,8), 6 -> (2,8), 22 -> (2,11), 23 -> (2,11), 24 -> (2,11))
[Backend] exuIdx 2 be connected, old info (2,8)
[Backend] exuIdx 2 be connected, new info (2,9)
[Backend] exuIdx 2 use pdestCopy 4
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,8), 6 -> (2,8), 22 -> (2,11), 23 -> (2,11), 24 -> (2,11))
[Backend] exuIdx 4 be connected, old info (2,8)
[Backend] exuIdx 4 be connected, new info (2,9)
[Backend] exuIdx 4 use pdestCopy 4
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,8), 22 -> (2,11), 23 -> (2,11), 24 -> (2,11))
[Backend] exuIdx 6 be connected, old info (2,8)
[Backend] exuIdx 6 be connected, new info (2,9)
[Backend] exuIdx 6 use pdestCopy 4
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,11), 23 -> (2,11), 24 -> (2,11))
[Backend] exuIdx 22 be connected, old info (2,11)
[Backend] exuIdx 22 be connected, new info (2,12)
[Backend] exuIdx 22 use pdestCopy 6
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,11), 24 -> (2,11))
[Backend] exuIdx 23 be connected, old info (2,11)
[Backend] exuIdx 23 be connected, new info (2,12)
[Backend] exuIdx 23 use pdestCopy 6
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,11))
[Backend] exuIdx 24 be connected, old info (2,11)
[Backend] exuIdx 24 be connected, new info (2,12)
[Backend] exuIdx 24 use pdestCopy 6
[Backend] Connect wakeup exuIdx 8
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] Connect wakeup exuIdx 9
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] Connect wakeup exuIdx 10
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] Connect wakeup exuIdx 11
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] Connect wakeup exuIdx 0
[Backend] copyPdestInfo HashMap(0 -> (2,9), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] exuIdx 0 be connected, old info (2,9)
[Backend] exuIdx 0 be connected, new info (2,10)
[Backend] exuIdx 0 use pdestCopy 5
[Backend] Connect wakeup exuIdx 2
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,9), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] exuIdx 2 be connected, old info (2,9)
[Backend] exuIdx 2 be connected, new info (2,10)
[Backend] exuIdx 2 use pdestCopy 5
[Backend] Connect wakeup exuIdx 4
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,9), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] exuIdx 4 be connected, old info (2,9)
[Backend] exuIdx 4 be connected, new info (2,10)
[Backend] exuIdx 4 use pdestCopy 5
[Backend] Connect wakeup exuIdx 6
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,9), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] exuIdx 6 be connected, old info (2,9)
[Backend] exuIdx 6 be connected, new info (2,10)
[Backend] exuIdx 6 use pdestCopy 5
[Backend] Connect wakeup exuIdx 22
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,10), 22 -> (2,12), 23 -> (2,12), 24 -> (2,12))
[Backend] exuIdx 22 be connected, old info (2,12)
[Backend] exuIdx 22 be connected, new info (2,13)
[Backend] exuIdx 22 use pdestCopy 6
[Backend] Connect wakeup exuIdx 23
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,10), 22 -> (2,13), 23 -> (2,12), 24 -> (2,12))
[Backend] exuIdx 23 be connected, old info (2,12)
[Backend] exuIdx 23 be connected, new info (2,13)
[Backend] exuIdx 23 use pdestCopy 6
[Backend] Connect wakeup exuIdx 24
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,10), 22 -> (2,13), 23 -> (2,13), 24 -> (2,12))
[Backend] exuIdx 24 be connected, old info (2,12)
[Backend] exuIdx 24 be connected, new info (2,13)
[Backend] exuIdx 24 use pdestCopy 6
[Backend] Connect wakeup exuIdx 8
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,10), 22 -> (2,13), 23 -> (2,13), 24 -> (2,13))
[Backend] Connect wakeup exuIdx 9
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,10), 22 -> (2,13), 23 -> (2,13), 24 -> (2,13))
[Backend] Connect wakeup exuIdx 10
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,10), 22 -> (2,13), 23 -> (2,13), 24 -> (2,13))
[Backend] Connect wakeup exuIdx 11
[Backend] copyPdestInfo HashMap(0 -> (2,10), 1 -> (2,-1), 2 -> (2,10), 3 -> (2,-1), 4 -> (2,10), 6 -> (2,10), 22 -> (2,13), 23 -> (2,13), 24 -> (2,13))
[Scheduler] io.fromSchedulers.wakeupVec: Vector(ALU0, ALU1, ALU2, ALU3, LDU0, LDU1, LDU2, FEX0, FEX1, FEX2, FEX3)
[Scheduler] iqWakeUpInKeys: Set(0, 10, 24, 6, 9, 2, 22, 11, 23, 8, 4)
[Scheduler] iqWakeUpOutKeys: Set(20, 21, 24, 25, 22, 27, 26, 23)
[Scheduler] io.toSchedulers.wakeupVec: Vector(LDU0, LDU1, LDU2)
[SchedulerMemImp] has intBusyTable: true, has vfBusyTable: true
[SchedulerMemImp] memAddrIQs.size: 6, enq.size: 12
[SchedulerMemImp] stAddrIQs.size:  2, enq.size: 4
[SchedulerMemImp] ldAddrIQs.size:  3, enq.size: 6
[SchedulerMemImp] stDataIQs.size:  2, enq.size: 4
[SchedulerMemImp] hyuIQs.size:     0, enq.size: 0
[SchedulerMemImp] sta iq idx in memSchdBlock: List(0, 1)
[SchedulerMemImp] hya iq idx in memSchdBlock: List()
[DataPath] IntIQ(4), MemIQ(3), MemIQ(8)
[DataPath] IntExu(8), FpExu(6), MemExu(8)
[DataPath] RegFile read req needed by Exu: Int(23), Fp(16), Vf(37)
[DataPath] RegFile read port: Int(23), Fp(16), Vf(37)
IntRegFile: size:64 read: 15 write: 8
FpRegFile: size:192 read: 16 write: 8
VfRegFilePart0: size:160 read: 15 write: 8
VfRegFilePart1: size:160 read: 15 write: 8
[DataPath] has intDebugRead: true, has vfDebugRead: true
[DataPath] s1_intPregRData.flatten.flatten.size: 72, intRfRdata.size: 15
[DataPath] s1_fpPregRData.flatten.flatten.size: 72, fpRfRdata.size: 16
[DataPath] s1_vfPregRData.flatten.flatten.size: 72, vfRfRdata.size: 15
[VsetModule] log2Vlen: 7
[VsetModule] vlWidth: 8
[VsetModule] log2Vlen: 7
[VsetModule] vlWidth: 8
[CSR] supported isa ext: List(a, s, i, u, m, c, h, f, d, v)
sstatusWNmask: 0xfffffffffff398dd
sstatusWmask: 0xc6722
sstatusRmask: 0x80000003000de762
Constantin initRead: slvpredctl = 96
CSR smblockctl init value:
  Store buffer replace threshold: 3
  Enable ld-ld vio check after reset: true
  Enable soft prefetch after reset: true
  Enable cache error after reset: true
  Enable uncache write outstanding: false
(CSR perfEvents Set,Hc,CSR.hpmEvents[0].value: Wire[UInt<6>],0)
(CSR perfEvents Set,Hc,CSR.hpmEvents[1].value: Wire[UInt<6>],1)
(CSR perfEvents Set,Hc,CSR.hpmEvents[2].value: Wire[UInt<6>],2)
(CSR perfEvents Set,Hc,CSR.hpmEvents[3].value: Wire[UInt<6>],3)
(CSR perfEvents Set,Hc,CSR.hpmEvents[4].value: Wire[UInt<6>],4)
(CSR perfEvents Set,Hc,CSR.hpmEvents[5].value: Wire[UInt<6>],5)
(CSR perfEvents Set,Hc,CSR.hpmEvents[6].value: Wire[UInt<6>],6)
(CSR perfEvents Set,Hc,CSR.hpmEvents[7].value: Wire[UInt<6>],7)
(CSR perfEvents Set,Hc,CSR.hpmEvents[8].value: Wire[UInt<6>],8)
(CSR perfEvents Set,Hc,CSR.hpmEvents[9].value: Wire[UInt<6>],9)
(CSR perfEvents Set,Hc,CSR.hpmEvents[10].value: Wire[UInt<6>],10)
(CSR perfEvents Set,Hc,CSR.hpmEvents[11].value: Wire[UInt<6>],11)
(CSR perfEvents Set,Hc,CSR.hpmEvents[12].value: Wire[UInt<6>],12)
(CSR perfEvents Set,Hc,CSR.hpmEvents[13].value: Wire[UInt<6>],13)
(CSR perfEvents Set,Hc,CSR.hpmEvents[14].value: Wire[UInt<6>],14)
(CSR perfEvents Set,Hc,CSR.hpmEvents[15].value: Wire[UInt<6>],15)
(CSR perfEvents Set,Hc,CSR.hpmEvents[16].value: Wire[UInt<6>],16)
(CSR perfEvents Set,Hc,CSR.hpmEvents[17].value: Wire[UInt<6>],17)
(CSR perfEvents Set,Hc,CSR.hpmEvents[18].value: Wire[UInt<6>],18)
(CSR perfEvents Set,Hc,CSR.hpmEvents[19].value: Wire[UInt<6>],19)
(CSR perfEvents Set,Hc,CSR.hpmEvents[20].value: Wire[UInt<6>],20)
(CSR perfEvents Set,Hc,CSR.hpmEvents[21].value: Wire[UInt<6>],21)
(CSR perfEvents Set,Hc,CSR.hpmEvents[22].value: Wire[UInt<6>],22)
(CSR perfEvents Set,Hc,CSR.hpmEvents[23].value: Wire[UInt<6>],23)
(CSR perfEvents Set,Hc,CSR.hpmEvents[24].value: Wire[UInt<6>],24)
(CSR perfEvents Set,Hc,CSR.hpmEvents[25].value: Wire[UInt<6>],25)
(CSR perfEvents Set,Hc,CSR.hpmEvents[26].value: Wire[UInt<6>],26)
(CSR perfEvents Set,Hc,CSR.hpmEvents[27].value: Wire[UInt<6>],27)
(CSR perfEvents Set,Hc,CSR.hpmEvents[28].value: Wire[UInt<6>],28)
(CSR perfEvents Set,Hc,CSR.hpmEvents[29].value: Wire[UInt<6>],29)
(CSR perfEvents Set,Hc,CSR.hpmEvents[30].value: Wire[UInt<6>],30)
(CSR perfEvents Set,Hc,CSR.hpmEvents[31].value: Wire[UInt<6>],31)
(CSR perfEvents Set,Hc,CSR.hpmEvents[32].value: Wire[UInt<6>],32)
(CSR perfEvents Set,Hc,CSR.hpmEvents[33].value: Wire[UInt<6>],33)
(CSR perfEvents Set,Hc,CSR.hpmEvents[34].value: Wire[UInt<6>],34)
(CSR perfEvents Set,Hc,CSR.hpmEvents[35].value: Wire[UInt<6>],35)
(CSR perfEvents Set,Hc,CSR.hpmEvents[36].value: Wire[UInt<6>],36)
(CSR perfEvents Set,Hc,CSR.hpmEvents[37].value: Wire[UInt<6>],37)
(CSR perfEvents Set,Hc,CSR.hpmEvents[38].value: Wire[UInt<6>],38)
(CSR perfEvents Set,Hc,CSR.hpmEvents[39].value: Wire[UInt<6>],39)
(CSR perfEvents Set,Hc,CSR.hpmEvents[40].value: Wire[UInt<6>],40)
(CSR perfEvents Set,Hc,CSR.hpmEvents[41].value: Wire[UInt<6>],41)
(CSR perfEvents Set,Hc,CSR.hpmEvents[42].value: Wire[UInt<6>],42)
(CSR perfEvents Set,Hc,CSR.hpmEvents[43].value: Wire[UInt<6>],43)
(CSR perfEvents Set,Hc,CSR.hpmEvents[44].value: Wire[UInt<6>],44)
(CSR perfEvents Set,Hc,CSR.hpmEvents[45].value: Wire[UInt<6>],45)
(CSR perfEvents Set,Hc,CSR.hpmEvents[46].value: Wire[UInt<6>],46)
(CSR perfEvents Set,Hc,CSR.hpmEvents[47].value: Wire[UInt<6>],47)
(CSR perfEvents Set,Hc,CSR.hpmEvents[48].value: Wire[UInt<6>],48)
(CSR perfEvents Set,Hc,CSR.hpmEvents[49].value: Wire[UInt<6>],49)
XiangShan CSR Lists
0x1 CSR.fcsr: Reg[UInt<64>]
0x2 CSR.fcsr: Reg[UInt<64>]
0x3 CSR.fcsr: Reg[UInt<64>]
0x8 CSR.vstart: Reg[UInt<64>]
0x9 CSR.vcsr: Reg[UInt<64>]
0xa CSR.vcsr: Reg[UInt<64>]
0xf CSR.vcsr: Reg[UInt<64>]
0x100 CSR.mstatus: Reg[UInt<64>]
0x104 CSR.mie: Reg[UInt<64>]
0x105 CSR.stvec: Reg[UInt<64>]
0x106 CSR.scounteren: Reg[UInt<64>]
0x10a CSR.senvcfg: Reg[UInt<64>]
0x140 CSR.sscratch: Reg[UInt<64>]
0x141 CSR.sepc: Reg[UInt<64>]
0x142 CSR.scause: Reg[UInt<64>]
0x143 CSR.stval: Reg[UInt<64>]
0x144 CSR.mipReg: Reg[UInt<64>]
0x180 CSR.satp: Reg[UInt<64>]
0x200 CSR.vsstatus: Reg[UInt<64>]
0x204 CSR.mie: Reg[UInt<64>]
0x205 CSR.vstvec: Reg[UInt<64>]
0x240 CSR.vsscratch: Reg[UInt<64>]
0x241 CSR.vsepc: Reg[UInt<64>]
0x242 CSR.vscause: Reg[UInt<64>]
0x243 CSR.vstval: Reg[UInt<64>]
0x244 CSR.mipReg: Reg[UInt<64>]
0x280 CSR.vsatp: Reg[UInt<64>]
0x300 CSR.mstatus: Reg[UInt<64>]
0x301 CSR.misa: Reg[UInt<64>]
0x302 CSR.medeleg: Reg[UInt<64>]
0x303 CSR.mideleg: Reg[UInt<64>]
0x304 CSR.mie: Reg[UInt<64>]
0x305 CSR.mtvec: Reg[UInt<64>]
0x306 CSR.mcounteren: Reg[UInt<64>]
0x30a CSR.menvcfg: Reg[UInt<64>]
0x320 CSR.mcountinhibit: Reg[UInt<64>]
0x323 CSR.perfEvents_0: Reg[UInt<64>]
0x324 CSR.perfEvents_1: Reg[UInt<64>]
0x325 CSR.perfEvents_2: Reg[UInt<64>]
0x326 CSR.perfEvents_3: Reg[UInt<64>]
0x327 CSR.perfEvents_4: Reg[UInt<64>]
0x328 CSR.perfEvents_5: Reg[UInt<64>]
0x329 CSR.perfEvents_6: Reg[UInt<64>]
0x32a CSR.perfEvents_7: Reg[UInt<64>]
0x32b CSR.perfEvents_8: Reg[UInt<64>]
0x32c CSR.perfEvents_9: Reg[UInt<64>]
0x32d CSR.perfEvents_10: Reg[UInt<64>]
0x32e CSR.perfEvents_11: Reg[UInt<64>]
0x32f CSR.perfEvents_12: Reg[UInt<64>]
0x330 CSR.perfEvents_13: Reg[UInt<64>]
0x331 CSR.perfEvents_14: Reg[UInt<64>]
0x332 CSR.perfEvents_15: Reg[UInt<64>]
0x333 CSR.perfEvents_16: Reg[UInt<64>]
0x334 CSR.perfEvents_17: Reg[UInt<64>]
0x335 CSR.perfEvents_18: Reg[UInt<64>]
0x336 CSR.perfEvents_19: Reg[UInt<64>]
0x337 CSR.perfEvents_20: Reg[UInt<64>]
0x338 CSR.perfEvents_21: Reg[UInt<64>]
0x339 CSR.perfEvents_22: Reg[UInt<64>]
0x33a CSR.perfEvents_23: Reg[UInt<64>]
0x33b CSR.perfEvents_24: Reg[UInt<64>]
0x33c CSR.perfEvents_25: Reg[UInt<64>]
0x33d CSR.perfEvents_26: Reg[UInt<64>]
0x33e CSR.perfEvents_27: Reg[UInt<64>]
0x33f CSR.perfEvents_28: Reg[UInt<64>]
0x340 CSR.mscratch: Reg[UInt<64>]
0x341 CSR.mepc: Reg[UInt<64>]
0x342 CSR.mcause: Reg[UInt<64>]
0x343 CSR.mtval: Reg[UInt<64>]
0x344 CSR.mipReg: Reg[UInt<64>]
0x34a CSR.mtinst: Reg[UInt<64>]
0x34b CSR.mtval2: Reg[UInt<64>]
0x3a0 CSR.pmpMapping_cfgMerged[0]: Reg[UInt<64>]
0x3a2 CSR.pmpMapping_cfgMerged[1]: Reg[UInt<64>]
0x3b0 CSR.pmpMapping_addr[0]: Reg[UInt<34>]
0x3b1 CSR.pmpMapping_addr[1]: Reg[UInt<34>]
0x3b2 CSR.pmpMapping_addr[2]: Reg[UInt<34>]
0x3b3 CSR.pmpMapping_addr[3]: Reg[UInt<34>]
0x3b4 CSR.pmpMapping_addr[4]: Reg[UInt<34>]
0x3b5 CSR.pmpMapping_addr[5]: Reg[UInt<34>]
0x3b6 CSR.pmpMapping_addr[6]: Reg[UInt<34>]
0x3b7 CSR.pmpMapping_addr[7]: Reg[UInt<34>]
0x3b8 CSR.pmpMapping_addr[8]: Reg[UInt<34>]
0x3b9 CSR.pmpMapping_addr[9]: Reg[UInt<34>]
0x3ba CSR.pmpMapping_addr[10]: Reg[UInt<34>]
0x3bb CSR.pmpMapping_addr[11]: Reg[UInt<34>]
0x3bc CSR.pmpMapping_addr[12]: Reg[UInt<34>]
0x3bd CSR.pmpMapping_addr[13]: Reg[UInt<34>]
0x3be CSR.pmpMapping_addr[14]: Reg[UInt<34>]
0x3bf CSR.pmpMapping_addr[15]: Reg[UInt<34>]
0x5c0 CSR.sbpctl: Reg[UInt<64>]
0x5c1 CSR.spfctl: Reg[UInt<64>]
0x5c2 CSR.slvpredctl: Reg[UInt<64>]
0x5c3 CSR.smblockctl: Reg[UInt<64>]
0x5c4 CSR.srnctl: Reg[UInt<64>]
0x5c5 CSR.cacheopRegs_0_2: Reg[UInt<64>]
0x5c6 CSR.cacheopRegs_1_2: Reg[UInt<64>]
0x5c7 CSR.cacheopRegs_17_2: Reg[UInt<64>]
0x5c8 CSR.cacheopRegs_2_2: Reg[UInt<64>]
0x5c9 CSR.cacheopRegs_15_2: Reg[UInt<64>]
0x5ca CSR.cacheopRegs_11_2: Reg[UInt<64>]
0x5cb CSR.cacheopRegs_9_2: Reg[UInt<64>]
0x5cc CSR.cacheopRegs_3_2: Reg[UInt<64>]
0x5cd CSR.cacheopRegs_8_2: Reg[UInt<64>]
0x5ce CSR.cacheopRegs_20_2: Reg[UInt<64>]
0x5cf CSR.cacheopRegs_13_2: Reg[UInt<64>]
0x5d0 CSR.cacheopRegs_14_2: Reg[UInt<64>]
0x5d1 CSR.cacheopRegs_19_2: Reg[UInt<64>]
0x5d2 CSR.cacheopRegs_12_2: Reg[UInt<64>]
0x5d3 CSR.cacheopRegs_10_2: Reg[UInt<64>]
0x5d4 CSR.cacheopRegs_18_2: Reg[UInt<64>]
0x5d5 CSR.cacheopRegs_16_2: Reg[UInt<64>]
0x5d6 CSR.cacheopRegs_6_2: Reg[UInt<64>]
0x5d7 CSR.cacheopRegs_5_2: Reg[UInt<64>]
0x5d8 CSR.cacheopRegs_7_2: Reg[UInt<64>]
0x5d9 CSR.cacheopRegs_4_2: Reg[UInt<64>]
0x600 CSR.hstatus: Reg[UInt<64>]
0x602 CSR.hedeleg: Reg[UInt<64>]
0x603 CSR.hideleg: Reg[UInt<64>]
0x604 CSR.mie: Reg[UInt<64>]
0x605 CSR.htimedelta: Reg[UInt<64>]
0x606 CSR.hcounteren: Reg[UInt<64>]
0x607 CSR.hgeie: Reg[UInt<64>]
0x60a CSR.henvcfg: Reg[UInt<64>]
0x643 CSR.htval: Reg[UInt<64>]
0x644 CSR.mipReg: Reg[UInt<64>]
0x645 CSR.mipReg: Reg[UInt<64>]
0x64a CSR.htinst: Reg[UInt<64>]
0x680 CSR.hgatp: Reg[UInt<64>]
0x7a0 CSR.tselectPhy: Reg[UInt<2>]
0x7a1 CSR.tdata1RegVec[tdata1RegVec]: Reg[UInt<64>]
0x7a2 CSR.tdata2RegVec[tdata2RegVec]: Reg[UInt<64>]
0x7a4 CSR.tinfo: Reg[UInt<64>]
0x7b0 CSR.dcsr: Reg[UInt<32>]
0x7b1 CSR.dpc: Reg[UInt<64>]
0x7b2 CSR.dscratch0: Reg[UInt<64>]
0x7b3 CSR.dscratch1: Reg[UInt<64>]
0x7c0 CSR.pmaMapping_cfgMerged[0]: Reg[UInt<64>]
0x7c2 CSR.pmaMapping_cfgMerged[1]: Reg[UInt<64>]
0x7c8 CSR.pmaMapping_addr[0]: Reg[UInt<34>]
0x7c9 CSR.pmaMapping_addr[1]: Reg[UInt<34>]
0x7ca CSR.pmaMapping_addr[2]: Reg[UInt<34>]
0x7cb CSR.pmaMapping_addr[3]: Reg[UInt<34>]
0x7cc CSR.pmaMapping_addr[4]: Reg[UInt<34>]
0x7cd CSR.pmaMapping_addr[5]: Reg[UInt<34>]
0x7ce CSR.pmaMapping_addr[6]: Reg[UInt<34>]
0x7cf CSR.pmaMapping_addr[7]: Reg[UInt<34>]
0x7d0 CSR.pmaMapping_addr[8]: Reg[UInt<34>]
0x7d1 CSR.pmaMapping_addr[9]: Reg[UInt<34>]
0x7d2 CSR.pmaMapping_addr[10]: Reg[UInt<34>]
0x7d3 CSR.pmaMapping_addr[11]: Reg[UInt<34>]
0x7d4 CSR.pmaMapping_addr[12]: Reg[UInt<34>]
0x7d5 CSR.pmaMapping_addr[13]: Reg[UInt<34>]
0x7d6 CSR.pmaMapping_addr[14]: Reg[UInt<34>]
0x7d7 CSR.pmaMapping_addr[15]: Reg[UInt<34>]
0x9c0 CSR.sdsid: Reg[UInt<64>]
0x9e0 CSR.sfetchctl: Reg[UInt<64>]
0xb00 CSR.mcycle: Reg[UInt<64>]
0xb02 CSR.minstret: Reg[UInt<64>]
0xb03 CSR.perfCnts_0: Reg[UInt<64>]
0xb04 CSR.perfCnts_1: Reg[UInt<64>]
0xb05 CSR.perfCnts_2: Reg[UInt<64>]
0xb06 CSR.perfCnts_3: Reg[UInt<64>]
0xb07 CSR.perfCnts_4: Reg[UInt<64>]
0xb08 CSR.perfCnts_5: Reg[UInt<64>]
0xb09 CSR.perfCnts_6: Reg[UInt<64>]
0xb0a CSR.perfCnts_7: Reg[UInt<64>]
0xb0b CSR.perfCnts_8: Reg[UInt<64>]
0xb0c CSR.perfCnts_9: Reg[UInt<64>]
0xb0d CSR.perfCnts_10: Reg[UInt<64>]
0xb0e CSR.perfCnts_11: Reg[UInt<64>]
0xb0f CSR.perfCnts_12: Reg[UInt<64>]
0xb10 CSR.perfCnts_13: Reg[UInt<64>]
0xb11 CSR.perfCnts_14: Reg[UInt<64>]
0xb12 CSR.perfCnts_15: Reg[UInt<64>]
0xb13 CSR.perfCnts_16: Reg[UInt<64>]
0xb14 CSR.perfCnts_17: Reg[UInt<64>]
0xb15 CSR.perfCnts_18: Reg[UInt<64>]
0xb16 CSR.perfCnts_19: Reg[UInt<64>]
0xb17 CSR.perfCnts_20: Reg[UInt<64>]
0xb18 CSR.perfCnts_21: Reg[UInt<64>]
0xb19 CSR.perfCnts_22: Reg[UInt<64>]
0xb1a CSR.perfCnts_23: Reg[UInt<64>]
0xb1b CSR.perfCnts_24: Reg[UInt<64>]
0xb1c CSR.perfCnts_25: Reg[UInt<64>]
0xb1d CSR.perfCnts_26: Reg[UInt<64>]
0xb1e CSR.perfCnts_27: Reg[UInt<64>]
0xb1f CSR.perfCnts_28: Reg[UInt<64>]
0xc00 CSR.mcycle: Reg[UInt<64>]
0xc02 CSR.minstret: Reg[UInt<64>]
0xc03 CSR.perfCnts_0: Reg[UInt<64>]
0xc04 CSR.perfCnts_1: Reg[UInt<64>]
0xc05 CSR.perfCnts_2: Reg[UInt<64>]
0xc06 CSR.perfCnts_3: Reg[UInt<64>]
0xc07 CSR.perfCnts_4: Reg[UInt<64>]
0xc08 CSR.perfCnts_5: Reg[UInt<64>]
0xc09 CSR.perfCnts_6: Reg[UInt<64>]
0xc0a CSR.perfCnts_7: Reg[UInt<64>]
0xc0b CSR.perfCnts_8: Reg[UInt<64>]
0xc0c CSR.perfCnts_9: Reg[UInt<64>]
0xc0d CSR.perfCnts_10: Reg[UInt<64>]
0xc0e CSR.perfCnts_11: Reg[UInt<64>]
0xc0f CSR.perfCnts_12: Reg[UInt<64>]
0xc10 CSR.perfCnts_13: Reg[UInt<64>]
0xc11 CSR.perfCnts_14: Reg[UInt<64>]
0xc12 CSR.perfCnts_15: Reg[UInt<64>]
0xc13 CSR.perfCnts_16: Reg[UInt<64>]
0xc14 CSR.perfCnts_17: Reg[UInt<64>]
0xc15 CSR.perfCnts_18: Reg[UInt<64>]
0xc16 CSR.perfCnts_19: Reg[UInt<64>]
0xc17 CSR.perfCnts_20: Reg[UInt<64>]
0xc18 CSR.perfCnts_21: Reg[UInt<64>]
0xc19 CSR.perfCnts_22: Reg[UInt<64>]
0xc1a CSR.perfCnts_23: Reg[UInt<64>]
0xc1b CSR.perfCnts_24: Reg[UInt<64>]
0xc1c CSR.perfCnts_25: Reg[UInt<64>]
0xc1d CSR.perfCnts_26: Reg[UInt<64>]
0xc1e CSR.perfCnts_27: Reg[UInt<64>]
0xc1f CSR.perfCnts_28: Reg[UInt<64>]
0xc20 CSR.vl: Reg[UInt<64>]
0xc21 CSR.vtype: Reg[UInt<64>]
0xc22 CSR.vlenb: Reg[UInt<64>]
0xe12 CSR.hgeip: Reg[UInt<64>]
0xf11 CSR.mvendorid: Reg[UInt<64>]
0xf12 CSR.marchid: Reg[UInt<64>]
0xf13 CSR.mimpid: Reg[UInt<64>]
0xf14 CSR.mhartid: Reg[UInt<64>]
0xf15 CSR.mconfigptr: Reg[UInt<64>]
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
[VsetModule] log2Vlen: 7
[VsetModule] vlWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
[BypassNetwork] ALU0 numRegSrc: 2
[BypassNetwork] BJU0 numRegSrc: 2
[BypassNetwork] ALU1 numRegSrc: 2
[BypassNetwork] BJU1 numRegSrc: 2
[BypassNetwork] ALU2 numRegSrc: 2
[BypassNetwork] BJU2 numRegSrc: 2
[BypassNetwork] ALU3 numRegSrc: 2
[BypassNetwork] BJU3 numRegSrc: 2
[BypassNetwork] FEX0 numRegSrc: 2
[BypassNetwork] FEX1 numRegSrc: 3
[BypassNetwork] FEX2 numRegSrc: 2
[BypassNetwork] FEX3 numRegSrc: 3
[BypassNetwork] FEX4 numRegSrc: 2
[BypassNetwork] FEX5 numRegSrc: 2
[BypassNetwork] VFEX0 numRegSrc: 5
[BypassNetwork] VFEX1 numRegSrc: 5
[BypassNetwork] VFEX2 numRegSrc: 5
[BypassNetwork] VFEX3 numRegSrc: 5
[BypassNetwork] VFEX4 numRegSrc: 5
[BypassNetwork] VFEX5 numRegSrc: 5
[BypassNetwork] STA0 numRegSrc: 1
[BypassNetwork] STA1 numRegSrc: 1
[BypassNetwork] LDU0 numRegSrc: 1
[BypassNetwork] LDU1 numRegSrc: 1
[BypassNetwork] LDU2 numRegSrc: 1
[BypassNetwork] VLSU0 numRegSrc: 5
[BypassNetwork] STD0 numRegSrc: 1
[BypassNetwork] STD1 numRegSrc: 1
[BypassNetwork] allExuNum: 28 intExuNum: 8 fpExuNum: 6 vfExuNum: 6 memExuNum: 8
[BypassNetwork] HasBypass2SourceExuNum: 4 HasBypass2SinkExuNum: 6 bypass2DataVecSize: 4
[BypassNetwork] HasBypass2SourceExu: Vector(14, 15, 16, 17)
[BypassNetwork] HasBypass2SinkExu: Vector(14, 15, 16, 17, 18, 19)
List((2,ImmExtractor.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor.extractMap_9_2: OpResult[UInt<64>]))
ALU0: bypass2ExuIdx is -1
List((2,ImmExtractor_1.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor_1.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor_1.extractMap_9_2: OpResult[UInt<64>]))
ALU0: bypass2ExuIdx is -1
List((1,ImmExtractor_2.extractMap_3_2: OpResult[UInt<64>]), (2,ImmExtractor_2.extractMap_6_2: OpResult[UInt<64>]), (3,ImmExtractor_2.extractMap_8_2: OpResult[UInt<64>]), (4,ImmExtractor_2.extractMap_11_2: OpResult[UInt<64>]))
BJU0: bypass2ExuIdx is -1
List((1,ImmExtractor_3.extractMap_3_2: OpResult[UInt<64>]), (2,ImmExtractor_3.extractMap_6_2: OpResult[UInt<64>]), (3,ImmExtractor_3.extractMap_8_2: OpResult[UInt<64>]), (4,ImmExtractor_3.extractMap_11_2: OpResult[UInt<64>]))
BJU0: bypass2ExuIdx is -1
List((2,ImmExtractor_4.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor_4.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor_4.extractMap_9_2: OpResult[UInt<64>]))
ALU1: bypass2ExuIdx is -1
List((2,ImmExtractor_5.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor_5.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor_5.extractMap_9_2: OpResult[UInt<64>]))
ALU1: bypass2ExuIdx is -1
List((1,ImmExtractor_6.extractMap_3_2: OpResult[UInt<64>]), (2,ImmExtractor_6.extractMap_6_2: OpResult[UInt<64>]), (3,ImmExtractor_6.extractMap_8_2: OpResult[UInt<64>]), (4,ImmExtractor_6.extractMap_11_2: OpResult[UInt<64>]))
BJU1: bypass2ExuIdx is -1
List((1,ImmExtractor_7.extractMap_3_2: OpResult[UInt<64>]), (2,ImmExtractor_7.extractMap_6_2: OpResult[UInt<64>]), (3,ImmExtractor_7.extractMap_8_2: OpResult[UInt<64>]), (4,ImmExtractor_7.extractMap_11_2: OpResult[UInt<64>]))
BJU1: bypass2ExuIdx is -1
List((2,ImmExtractor_8.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor_8.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor_8.extractMap_9_2: OpResult[UInt<64>]))
ALU2: bypass2ExuIdx is -1
List((2,ImmExtractor_9.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor_9.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor_9.extractMap_9_2: OpResult[UInt<64>]))
ALU2: bypass2ExuIdx is -1
List((1,ImmExtractor_10.extractMap_3_2: OpResult[UInt<64>]), (2,ImmExtractor_10.extractMap_6_2: OpResult[UInt<64>]), (3,ImmExtractor_10.extractMap_8_2: OpResult[UInt<64>]), (4,ImmExtractor_10.extractMap_11_2: OpResult[UInt<64>]), (9,ImmExtractor_10.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_10.extractMap_1_2: OpResult[UInt<64>]), (12,ImmExtractor_10.extractMap_7_2: OpResult[UInt<64>]), (13,ImmExtractor_10.extractMap_5_2: OpResult[UInt<64>]))
BJU2: bypass2ExuIdx is -1
List((1,ImmExtractor_11.extractMap_3_2: OpResult[UInt<64>]), (2,ImmExtractor_11.extractMap_6_2: OpResult[UInt<64>]), (3,ImmExtractor_11.extractMap_8_2: OpResult[UInt<64>]), (4,ImmExtractor_11.extractMap_11_2: OpResult[UInt<64>]), (9,ImmExtractor_11.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_11.extractMap_1_2: OpResult[UInt<64>]), (12,ImmExtractor_11.extractMap_7_2: OpResult[UInt<64>]), (13,ImmExtractor_11.extractMap_5_2: OpResult[UInt<64>]))
BJU2: bypass2ExuIdx is -1
List((2,ImmExtractor_12.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor_12.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor_12.extractMap_9_2: OpResult[UInt<64>]))
ALU3: bypass2ExuIdx is -1
List((2,ImmExtractor_13.extractMap_6_2: OpResult[UInt<64>]), (4,ImmExtractor_13.extractMap_11_2: OpResult[UInt<64>]), (11,ImmExtractor_13.extractMap_9_2: OpResult[UInt<64>]))
ALU3: bypass2ExuIdx is -1
List()
BJU3: bypass2ExuIdx is -1
List()
BJU3: bypass2ExuIdx is -1
List()
FEX0: bypass2ExuIdx is -1
List()
FEX0: bypass2ExuIdx is -1
List()
FEX1: bypass2ExuIdx is -1
List()
FEX1: bypass2ExuIdx is -1
List()
FEX1: bypass2ExuIdx is -1
List()
FEX2: bypass2ExuIdx is -1
List()
FEX2: bypass2ExuIdx is -1
List()
FEX3: bypass2ExuIdx is -1
List()
FEX3: bypass2ExuIdx is -1
List()
FEX3: bypass2ExuIdx is -1
List()
FEX4: bypass2ExuIdx is -1
List()
FEX4: bypass2ExuIdx is -1
List()
FEX5: bypass2ExuIdx is -1
List()
FEX5: bypass2ExuIdx is -1
List((9,ImmExtractor_30.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_30.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_30.extractMap_12_2: OpResult[UInt<64>]))
VFEX0: bypass2ExuIdx is 0
List((9,ImmExtractor_31.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_31.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_31.extractMap_12_2: OpResult[UInt<64>]))
VFEX0: bypass2ExuIdx is 0
List((9,ImmExtractor_32.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_32.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_32.extractMap_12_2: OpResult[UInt<64>]))
VFEX0: bypass2ExuIdx is 0
List((9,ImmExtractor_33.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_33.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_33.extractMap_12_2: OpResult[UInt<64>]))
VFEX0: bypass2ExuIdx is 0
List((9,ImmExtractor_34.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_34.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_34.extractMap_12_2: OpResult[UInt<64>]))
VFEX0: bypass2ExuIdx is 0
List((12,ImmExtractor_35.extractMap_7_2: OpResult[UInt<64>]), (13,ImmExtractor_35.extractMap_5_2: OpResult[UInt<64>]))
VFEX1: bypass2ExuIdx is 1
List((12,ImmExtractor_36.extractMap_7_2: OpResult[UInt<64>]), (13,ImmExtractor_36.extractMap_5_2: OpResult[UInt<64>]))
VFEX1: bypass2ExuIdx is 1
List((12,ImmExtractor_37.extractMap_7_2: OpResult[UInt<64>]), (13,ImmExtractor_37.extractMap_5_2: OpResult[UInt<64>]))
VFEX1: bypass2ExuIdx is 1
List((12,ImmExtractor_38.extractMap_7_2: OpResult[UInt<64>]), (13,ImmExtractor_38.extractMap_5_2: OpResult[UInt<64>]))
VFEX1: bypass2ExuIdx is 1
List((12,ImmExtractor_39.extractMap_7_2: OpResult[UInt<64>]), (13,ImmExtractor_39.extractMap_5_2: OpResult[UInt<64>]))
VFEX1: bypass2ExuIdx is 1
List((9,ImmExtractor_40.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_40.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_40.extractMap_12_2: OpResult[UInt<64>]))
VFEX2: bypass2ExuIdx is 2
List((9,ImmExtractor_41.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_41.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_41.extractMap_12_2: OpResult[UInt<64>]))
VFEX2: bypass2ExuIdx is 2
List((9,ImmExtractor_42.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_42.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_42.extractMap_12_2: OpResult[UInt<64>]))
VFEX2: bypass2ExuIdx is 2
List((9,ImmExtractor_43.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_43.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_43.extractMap_12_2: OpResult[UInt<64>]))
VFEX2: bypass2ExuIdx is 2
List((9,ImmExtractor_44.extractMap_4_2: OpResult[UInt<64>]), (10,ImmExtractor_44.extractMap_1_2: OpResult[UInt<64>]), (15,ImmExtractor_44.extractMap_12_2: OpResult[UInt<64>]))
VFEX2: bypass2ExuIdx is 2
List()
VFEX3: bypass2ExuIdx is 3
List()
VFEX3: bypass2ExuIdx is 3
List()
VFEX3: bypass2ExuIdx is 3
List()
VFEX3: bypass2ExuIdx is 3
List()
VFEX3: bypass2ExuIdx is 3
List()
VFEX4: bypass2ExuIdx is 4
List()
VFEX4: bypass2ExuIdx is 4
List()
VFEX4: bypass2ExuIdx is 4
List()
VFEX4: bypass2ExuIdx is 4
List()
VFEX4: bypass2ExuIdx is 4
List()
VFEX5: bypass2ExuIdx is 5
List()
VFEX5: bypass2ExuIdx is 5
List()
VFEX5: bypass2ExuIdx is 5
List()
VFEX5: bypass2ExuIdx is 5
List()
VFEX5: bypass2ExuIdx is 5
List((14,ImmExtractor_60.extractMap_2_2: OpResult[UInt<64>]))
STA0: bypass2ExuIdx is -1
List((14,ImmExtractor_61.extractMap_2_2: OpResult[UInt<64>]))
STA1: bypass2ExuIdx is -1
List((4,ImmExtractor_62.extractMap_11_2: OpResult[UInt<64>]))
LDU0: bypass2ExuIdx is -1
List((4,ImmExtractor_63.extractMap_11_2: OpResult[UInt<64>]))
LDU1: bypass2ExuIdx is -1
List((4,ImmExtractor_64.extractMap_11_2: OpResult[UInt<64>]))
LDU2: bypass2ExuIdx is -1
List()
VLSU0: bypass2ExuIdx is -1
List()
VLSU0: bypass2ExuIdx is -1
List()
VLSU0: bypass2ExuIdx is -1
List()
VLSU0: bypass2ExuIdx is -1
List()
VLSU0: bypass2ExuIdx is -1
List()
STD0: bypass2ExuIdx is -1
List()
STD1: bypass2ExuIdx is -1
numBytes: 16, byteWidth: 4
elemIdxWidth: 8
[WbDataPath] exu: 0, uncertain: false, certain: true
[WbDataPath] exu: 1, uncertain: false, certain: true
[WbDataPath] exu: 2, uncertain: false, certain: true
[WbDataPath] exu: 3, uncertain: false, certain: true
[WbDataPath] exu: 4, uncertain: false, certain: true
[WbDataPath] exu: 5, uncertain: false, certain: true
[WbDataPath] exu: 6, uncertain: false, certain: true
[WbDataPath] exu: 7, uncertain: true, certain: false
[WbDataPath] exu: 8, uncertain: false, certain: true
[WbDataPath] exu: 9, uncertain: false, certain: true
[WbDataPath] exu: 10, uncertain: false, certain: true
[WbDataPath] exu: 11, uncertain: false, certain: true
[WbDataPath] exu: 12, uncertain: true, certain: false
[WbDataPath] exu: 13, uncertain: true, certain: false
[WbDataPath] exu: 14, uncertain: false, certain: true
[WbDataPath] exu: 15, uncertain: false, certain: true
[WbDataPath] exu: 16, uncertain: false, certain: true
[WbDataPath] exu: 17, uncertain: false, certain: true
[WbDataPath] exu: 18, uncertain: true, certain: false
[WbDataPath] exu: 19, uncertain: true, certain: false
[WbDataPath] exu: 20, uncertain: true, certain: false
[WbDataPath] exu: 21, uncertain: true, certain: false
[WbDataPath] exu: 22, uncertain: true, certain: false
[WbDataPath] exu: 23, uncertain: true, certain: false
[WbDataPath] exu: 24, uncertain: true, certain: false
[WbDataPath] exu: 25, uncertain: true, certain: false
[WbDataPath] exu: 26, uncertain: false, certain: true
[WbDataPath] exu: 27, uncertain: false, certain: true
[WbDataPath] write int preg: IntExu(8) FpExu(2) VfExu(2) MemExu(3)
[WbDataPath] write fp preg: IntExu(1) FpExu(6) VfExu(0) MemExu(3)
[WbDataPath] write vf preg: IntExu(1) FpExu(1) VfExu(6) MemExu(1)
[WbDataPath] int preg write back port num: 8, active port: List(0, 1, 2, 3, 4, 5, 6, 7)
[WbDataPath] fp preg write back port num: 8, active port: List(0, 1, 2, 3, 4, 5, 6, 7)
[WbDataPath] vf preg write back port num: 8, active port: List(0, 1, 2, 3, 4, 5, 6, 7)
[Backend] iq wake up keys: Set(0, 10, 24, 14, 6, 9, 2, 17, 22, 16, 11, 23, 8, 4, 15)
[Backend] wbDataPath.io.toIntPreg: 8, dataPath.io.fromIntWb: 8
[Backend] wbDataPath.io.toVfPreg: 8, dataPath.io.fromFpWb: 8
[Backend] memExuBlocksHasLDU: List(List(false), List(false), List(true), List(true), List(true), List(false), List(false), List(false))
Constantin initRead: EnableMdp = 1
Constantin initRead: EnableMdp = 1
Constantin initRead: EnableMdp = 1
Constantin initRead: EnableMdp = 1
Constantin initRead: EnableMdp = 1
Constantin initRead: EnableMdp = 1
Constantin initRead: EnableMdp = 1
Constantin initRead: EnableMdp = 1
DCache:
  DCacheSets: 64
  DCacheSetDiv: 1
  DCacheWays: 8
  DCacheBanks: 8
  DCacheSRAMRowBits: 64
  DCacheWordOffset: 3
  DCacheBankOffset: 3
  DCacheSetOffset: 6
  DCacheTagOffset: 12
  DCacheAboveIndexOffset: 12
  DcacheMaxPrefetchEntry: 2
  WPUEnable: false
  WPUEnableCfPred: false
  WPUAlgorithm: mmru
  DCacheType: BankedDataArray
Constantin initRead: isWriteBankConflictTable0 = 0
Constantin initRead: depth0 = 32
Constantin initRead: enableDynamicPrefetcher0 = 1
Constantin initRead: StoreWaitThreshold_0 = 0
Constantin initRead: nMaxPrefetchEntry0 = 14
Constantin initRead: isWriteL1MissQMissTable0 = 0
  WpuType: MmruWPU
Constantin initRead: isWriteLoadMissTable0 = 0
Constantin initRead: isFirstHitWrite0 = 0
Constantin initRead: isWriteLoadAccessTable0 = 0
Cache op decoder (dcache):
  Id 1
Uncahe Buffer Size: 4 entries
Constantin initRead: isWriteL2TlbPrefetchTable0 = 0
l2tlb: a ptw, a llptw with size 6, miss queue size 40 l1:4 fa l2: nSets 4 nWays 4 l3: 4 nWays 8 blockBytes:64
Constantin initRead: isWriteL1TlbTable0 = 0
Constantin initRead: isWritePageCacheTable0 = 0
Constantin initRead: isWritePTWTable0 = 0
Constantin initRead: isWriteL2TlbMissQueueTable0 = 0
LoadUopQueue: size:32
LoadFlowQueue: size:32
StoreUopQueue: size:32
LoadQueueRAR: size: 16
FreeList: LoadQueueRAR freelist, size 16
LoadQueueRAW: size 12
FreeList: LoadQueueRAW freelist, size 12
LoadQueueReplay size: 24
FreeList: LoadQueueReplay freelist, size 24
Constantin initRead: ColdDownThreshold_0 = 12
Constantin initRead: EnableHybridUnitReplay = 1
VirtualLoadQueue: size: 24
FreeList: UncacheBuffer freelist, size 8
StoreQueue: size:20
Constantin initRead: LFSTEnable = 1
Constantin initRead: LFSTEnable = 1
Constantin initRead: LFSTEnable = 1
Constantin initRead: ForceWriteUpper_0 = 60
Constantin initRead: ForceWriteLower_0 = 55
Constantin initRead: StoreBufferThreshold_0 = 7
Constantin initRead: StoreBufferBase_0 = 4
ldtlb_storage tlb_fa: nSets1 nWays:4
ldtlb: page: 4 fa plru
sttlb_storage tlb_fa: nSets1 nWays:4
sttlb: page: 4 fa plru
pftlb_storage tlb_fa: nSets1 nWays:4
pftlb: page: 4 fa plru
Constantin initRead: CorrectMissTrain0 = 0
(MemBlock perfEvents Set,noEvent,UInt<1>(0),0)
(MemBlock perfEvents Set,load_s0_in_fire         ,LoadUnit.io_perf[0].value: IO[UInt<6>],1)
(MemBlock perfEvents Set,load_to_load_forward    ,LoadUnit.io_perf[1].value: IO[UInt<6>],2)
(MemBlock perfEvents Set,stall_dcache            ,LoadUnit.io_perf[2].value: IO[UInt<6>],3)
(MemBlock perfEvents Set,load_s1_in_fire         ,LoadUnit.io_perf[3].value: IO[UInt<6>],4)
(MemBlock perfEvents Set,load_s1_tlb_miss        ,LoadUnit.io_perf[4].value: IO[UInt<6>],5)
(MemBlock perfEvents Set,load_s2_in_fire         ,LoadUnit.io_perf[5].value: IO[UInt<6>],6)
(MemBlock perfEvents Set,load_s2_dcache_miss     ,LoadUnit.io_perf[6].value: IO[UInt<6>],7)
(MemBlock perfEvents Set,load_s0_in_fire         ,LoadUnit_1.io_perf[0].value: IO[UInt<6>],8)
(MemBlock perfEvents Set,load_to_load_forward    ,LoadUnit_1.io_perf[1].value: IO[UInt<6>],9)
(MemBlock perfEvents Set,stall_dcache            ,LoadUnit_1.io_perf[2].value: IO[UInt<6>],10)
(MemBlock perfEvents Set,load_s1_in_fire         ,LoadUnit_1.io_perf[3].value: IO[UInt<6>],11)
(MemBlock perfEvents Set,load_s1_tlb_miss        ,LoadUnit_1.io_perf[4].value: IO[UInt<6>],12)
(MemBlock perfEvents Set,load_s2_in_fire         ,LoadUnit_1.io_perf[5].value: IO[UInt<6>],13)
(MemBlock perfEvents Set,load_s2_dcache_miss     ,LoadUnit_1.io_perf[6].value: IO[UInt<6>],14)
(MemBlock perfEvents Set,load_s0_in_fire         ,LoadUnit_2.io_perf[0].value: IO[UInt<6>],15)
(MemBlock perfEvents Set,load_to_load_forward    ,LoadUnit_2.io_perf[1].value: IO[UInt<6>],16)
(MemBlock perfEvents Set,stall_dcache            ,LoadUnit_2.io_perf[2].value: IO[UInt<6>],17)
(MemBlock perfEvents Set,load_s1_in_fire         ,LoadUnit_2.io_perf[3].value: IO[UInt<6>],18)
(MemBlock perfEvents Set,load_s1_tlb_miss        ,LoadUnit_2.io_perf[4].value: IO[UInt<6>],19)
(MemBlock perfEvents Set,load_s2_in_fire         ,LoadUnit_2.io_perf[5].value: IO[UInt<6>],20)
(MemBlock perfEvents Set,load_s2_dcache_miss     ,LoadUnit_2.io_perf[6].value: IO[UInt<6>],21)
(MemBlock perfEvents Set,sbuffer_req_valid ,Sbuffer.io_perf[0].value: IO[UInt<6>],22)
(MemBlock perfEvents Set,sbuffer_req_fire  ,Sbuffer.io_perf[1].value: IO[UInt<6>],23)
(MemBlock perfEvents Set,sbuffer_merge     ,Sbuffer.io_perf[2].value: IO[UInt<6>],24)
(MemBlock perfEvents Set,sbuffer_newline   ,Sbuffer.io_perf[3].value: IO[UInt<6>],25)
(MemBlock perfEvents Set,dcache_req_valid  ,Sbuffer.io_perf[4].value: IO[UInt<6>],26)
(MemBlock perfEvents Set,dcache_req_fire   ,Sbuffer.io_perf[5].value: IO[UInt<6>],27)
(MemBlock perfEvents Set,sbuffer_idle      ,Sbuffer.io_perf[6].value: IO[UInt<6>],28)
(MemBlock perfEvents Set,sbuffer_flush     ,Sbuffer.io_perf[7].value: IO[UInt<6>],29)
(MemBlock perfEvents Set,sbuffer_replace   ,Sbuffer.io_perf[8].value: IO[UInt<6>],30)
(MemBlock perfEvents Set,mpipe_resp_valid  ,Sbuffer.io_perf[9].value: IO[UInt<6>],31)
(MemBlock perfEvents Set,replay_resp_valid ,Sbuffer.io_perf[10].value: IO[UInt<6>],32)
(MemBlock perfEvents Set,coh_timeout       ,Sbuffer.io_perf[11].value: IO[UInt<6>],33)
(MemBlock perfEvents Set,sbuffer_1_4_valid ,Sbuffer.io_perf[12].value: IO[UInt<6>],34)
(MemBlock perfEvents Set,sbuffer_2_4_valid ,Sbuffer.io_perf[13].value: IO[UInt<6>],35)
(MemBlock perfEvents Set,sbuffer_3_4_valid ,Sbuffer.io_perf[14].value: IO[UInt<6>],36)
(MemBlock perfEvents Set,sbuffer_full_valid,Sbuffer.io_perf[15].value: IO[UInt<6>],37)
(MemBlock perfEvents Set,enq,LsqWrapper.io_perf[0].value: IO[UInt<6>],38)
(MemBlock perfEvents Set,ld_ld_violation,LsqWrapper.io_perf[1].value: IO[UInt<6>],39)
(MemBlock perfEvents Set,enq ,LsqWrapper.io_perf[2].value: IO[UInt<6>],40)
(MemBlock perfEvents Set,stld_rollback,LsqWrapper.io_perf[3].value: IO[UInt<6>],41)
(MemBlock perfEvents Set,enq,LsqWrapper.io_perf[4].value: IO[UInt<6>],42)
(MemBlock perfEvents Set,deq,LsqWrapper.io_perf[5].value: IO[UInt<6>],43)
(MemBlock perfEvents Set,deq_block,LsqWrapper.io_perf[6].value: IO[UInt<6>],44)
(MemBlock perfEvents Set,replay_full,LsqWrapper.io_perf[7].value: IO[UInt<6>],45)
(MemBlock perfEvents Set,replay_rar_nack,LsqWrapper.io_perf[8].value: IO[UInt<6>],46)
(MemBlock perfEvents Set,replay_raw_nack,LsqWrapper.io_perf[9].value: IO[UInt<6>],47)
(MemBlock perfEvents Set,replay_nuke,LsqWrapper.io_perf[10].value: IO[UInt<6>],48)
(MemBlock perfEvents Set,replay_mem_amb,LsqWrapper.io_perf[11].value: IO[UInt<6>],49)
(MemBlock perfEvents Set,replay_tlb_miss,LsqWrapper.io_perf[12].value: IO[UInt<6>],50)
(MemBlock perfEvents Set,replay_bank_conflict,LsqWrapper.io_perf[13].value: IO[UInt<6>],51)
(MemBlock perfEvents Set,replay_dcache_replay,LsqWrapper.io_perf[14].value: IO[UInt<6>],52)
(MemBlock perfEvents Set,replay_forward_fail,LsqWrapper.io_perf[15].value: IO[UInt<6>],53)
(MemBlock perfEvents Set,replay_dcache_miss,LsqWrapper.io_perf[16].value: IO[UInt<6>],54)
(MemBlock perfEvents Set,full_mask_000,LsqWrapper.io_perf[17].value: IO[UInt<6>],55)
(MemBlock perfEvents Set,full_mask_001,LsqWrapper.io_perf[18].value: IO[UInt<6>],56)
(MemBlock perfEvents Set,full_mask_010,LsqWrapper.io_perf[19].value: IO[UInt<6>],57)
(MemBlock perfEvents Set,full_mask_011,LsqWrapper.io_perf[20].value: IO[UInt<6>],58)
(MemBlock perfEvents Set,full_mask_100,LsqWrapper.io_perf[21].value: IO[UInt<6>],59)
(MemBlock perfEvents Set,full_mask_101,LsqWrapper.io_perf[22].value: IO[UInt<6>],60)
(MemBlock perfEvents Set,full_mask_110,LsqWrapper.io_perf[23].value: IO[UInt<6>],61)
(MemBlock perfEvents Set,full_mask_111,LsqWrapper.io_perf[24].value: IO[UInt<6>],62)
(MemBlock perfEvents Set,nuke_rollback,LsqWrapper.io_perf[25].value: IO[UInt<6>],63)
(MemBlock perfEvents Set,nack_rollback,LsqWrapper.io_perf[26].value: IO[UInt<6>],64)
(MemBlock perfEvents Set,mmioCycle      ,LsqWrapper.io_perf[27].value: IO[UInt<6>],65)
(MemBlock perfEvents Set,mmioCnt        ,LsqWrapper.io_perf[28].value: IO[UInt<6>],66)
(MemBlock perfEvents Set,mmio_wb_success,LsqWrapper.io_perf[29].value: IO[UInt<6>],67)
(MemBlock perfEvents Set,mmio_wb_blocked,LsqWrapper.io_perf[30].value: IO[UInt<6>],68)
(MemBlock perfEvents Set,stq_1_4_valid  ,LsqWrapper.io_perf[31].value: IO[UInt<6>],69)
(MemBlock perfEvents Set,stq_2_4_valid  ,LsqWrapper.io_perf[32].value: IO[UInt<6>],70)
(MemBlock perfEvents Set,stq_3_4_valid  ,LsqWrapper.io_perf[33].value: IO[UInt<6>],71)
(MemBlock perfEvents Set,stq_4_4_valid  ,LsqWrapper.io_perf[34].value: IO[UInt<6>],72)
(MemBlock perfEvents Set,dcache_wbq_req      ,DCacheWrapper.io_perf[0].value: IO[UInt<6>],73)
(MemBlock perfEvents Set,dcache_wbq_1_4_valid,DCacheWrapper.io_perf[1].value: IO[UInt<6>],74)
(MemBlock perfEvents Set,dcache_wbq_2_4_valid,DCacheWrapper.io_perf[2].value: IO[UInt<6>],75)
(MemBlock perfEvents Set,dcache_wbq_3_4_valid,DCacheWrapper.io_perf[3].value: IO[UInt<6>],76)
(MemBlock perfEvents Set,dcache_wbq_4_4_valid,DCacheWrapper.io_perf[4].value: IO[UInt<6>],77)
(MemBlock perfEvents Set,dcache_mp_req          ,DCacheWrapper.io_perf[5].value: IO[UInt<6>],78)
(MemBlock perfEvents Set,dcache_mp_total_penalty,DCacheWrapper.io_perf[6].value: IO[UInt<6>],79)
(MemBlock perfEvents Set,dcache_missq_req      ,DCacheWrapper.io_perf[7].value: IO[UInt<6>],80)
(MemBlock perfEvents Set,dcache_missq_1_4_valid,DCacheWrapper.io_perf[8].value: IO[UInt<6>],81)
(MemBlock perfEvents Set,dcache_missq_2_4_valid,DCacheWrapper.io_perf[9].value: IO[UInt<6>],82)
(MemBlock perfEvents Set,dcache_missq_3_4_valid,DCacheWrapper.io_perf[10].value: IO[UInt<6>],83)
(MemBlock perfEvents Set,dcache_missq_4_4_valid,DCacheWrapper.io_perf[11].value: IO[UInt<6>],84)
(MemBlock perfEvents Set,dcache_probq_req      ,DCacheWrapper.io_perf[12].value: IO[UInt<6>],85)
(MemBlock perfEvents Set,dcache_probq_1_4_valid,DCacheWrapper.io_perf[13].value: IO[UInt<6>],86)
(MemBlock perfEvents Set,dcache_probq_2_4_valid,DCacheWrapper.io_perf[14].value: IO[UInt<6>],87)
(MemBlock perfEvents Set,dcache_probq_3_4_valid,DCacheWrapper.io_perf[15].value: IO[UInt<6>],88)
(MemBlock perfEvents Set,dcache_probq_4_4_valid,DCacheWrapper.io_perf[16].value: IO[UInt<6>],89)
(MemBlock perfEvents Set,load_req                 ,DCacheWrapper.io_perf[17].value: IO[UInt<6>],90)
(MemBlock perfEvents Set,load_replay              ,DCacheWrapper.io_perf[18].value: IO[UInt<6>],91)
(MemBlock perfEvents Set,load_replay_for_data_nack,DCacheWrapper.io_perf[19].value: IO[UInt<6>],92)
(MemBlock perfEvents Set,load_replay_for_no_mshr  ,DCacheWrapper.io_perf[20].value: IO[UInt<6>],93)
(MemBlock perfEvents Set,load_replay_for_conflict ,DCacheWrapper.io_perf[21].value: IO[UInt<6>],94)
(MemBlock perfEvents Set,load_req                 ,DCacheWrapper.io_perf[22].value: IO[UInt<6>],95)
(MemBlock perfEvents Set,load_replay              ,DCacheWrapper.io_perf[23].value: IO[UInt<6>],96)
(MemBlock perfEvents Set,load_replay_for_data_nack,DCacheWrapper.io_perf[24].value: IO[UInt<6>],97)
(MemBlock perfEvents Set,load_replay_for_no_mshr  ,DCacheWrapper.io_perf[25].value: IO[UInt<6>],98)
(MemBlock perfEvents Set,load_replay_for_conflict ,DCacheWrapper.io_perf[26].value: IO[UInt<6>],99)
(MemBlock perfEvents Set,load_req                 ,DCacheWrapper.io_perf[27].value: IO[UInt<6>],100)
(MemBlock perfEvents Set,load_replay              ,DCacheWrapper.io_perf[28].value: IO[UInt<6>],101)
(MemBlock perfEvents Set,load_replay_for_data_nack,DCacheWrapper.io_perf[29].value: IO[UInt<6>],102)
(MemBlock perfEvents Set,load_replay_for_no_mshr  ,DCacheWrapper.io_perf[30].value: IO[UInt<6>],103)
(MemBlock perfEvents Set,load_replay_for_conflict ,DCacheWrapper.io_perf[31].value: IO[UInt<6>],104)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[0].value: Wire[UInt<6>],105)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[1].value: Wire[UInt<6>],106)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[2].value: Wire[UInt<6>],107)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[3].value: Wire[UInt<6>],108)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[4].value: Wire[UInt<6>],109)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[5].value: Wire[UInt<6>],110)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[6].value: Wire[UInt<6>],111)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[7].value: Wire[UInt<6>],112)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[8].value: Wire[UInt<6>],113)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[9].value: Wire[UInt<6>],114)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[10].value: Wire[UInt<6>],115)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[11].value: Wire[UInt<6>],116)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[12].value: Wire[UInt<6>],117)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[13].value: Wire[UInt<6>],118)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[14].value: Wire[UInt<6>],119)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[15].value: Wire[UInt<6>],120)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[16].value: Wire[UInt<6>],121)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[17].value: Wire[UInt<6>],122)
(MemBlock perfEvents Set,perfEventsPTW,MemBlock.perfEventsPTW[18].value: Wire[UInt<6>],123)
(MemBlock perfEvents Set,ldDeqCount,MemBlock.ldDeqCount: OpResult[UInt<3>],124)
(MemBlock perfEvents Set,stDeqCount,MemBlock.stDeqCount: OpResult[UInt<3>],125)
FPGAPlatform:false EnableDebug:false
====== Inclusive L2 (64.0KB * 2-bank) prefetch: None ======
bankBits: 1
replacement: plru
replace policy: 3
sets:128 ways:8 blockBytes:64
usr/needHint: (1-bit)
usr/vaddr: (35-bit)
usr/alias: (1-bit)
usr/reqSource: (4-bit)
echo/uc: (4-bit)
echo/isKeyword: (1-bit)
	0 <= dcache;	sourceRange: 0~13
	1 <= icache;	sourceRange: 24~27
	2 <= ptw;	sourceRange: 16~24
====== Non-inclusive L3 (512.0KB * 1-bank) prefetch: None ======
bankBits: 0
sets:1024 ways:8 blockBytes:64
[client] size:128.0KB
[client] sets:256 ways:8 blockBytes:64
blockGranularityBits: 7
echo/blockisdirty: (1-bit)
clientBits: 1
Data ECC bits:0
Tag ECC bits:0
Tag ECC bits:0
	0 <= L2
	1 <= dma ID#0
	2 <= dma ID#1
	3 <= debug
[warn] rocket-chip/src/main/scala/devices/tilelink/Error.scala 60:48: [W004] Dynamic index with width 3 is too wide for Vec of size 3 (expected index width 2).
[warn]       dc.bits.param   := VecInit(toB, toN, toN)(c.bits.param)
[warn]                                                ^
[warn] rocket-chip/src/main/scala/devices/debug/SBA.scala 307:25: [W004] Dynamic index with width 4 is too wide for Vec of size 8 (expected index width 3).
[warn]     muxedData := vecData(counter)
[warn]                         ^
[warn] rocket-chip/src/main/scala/devices/debug/Debug.scala 919:17: [W004] Dynamic index with width 1 is too wide for Vec of size 1 (expected index width 0).
[warn]       hamaskFull(selectedHartReg) := true.B
[warn]                 ^
[warn] rocket-chip/src/main/scala/devices/debug/Debug.scala 1727:37: [W002] Dynamic index with width 1 is too large for extractee of width 1
[warn]     val hartHalted   = haltedBitRegs(selectedHartReg)
[warn]                                     ^
[warn] src/main/scala/xiangshan/frontend/icache/ICache.scala 321:65: [W004] Dynamic index with width 64 is too wide for Vec of size 4 (expected index width 2).
[warn]     tagArrays(0).io.r.resp.asTypeOf(Vec(nWays, UInt(tagBits.W)))(io.cacheOp.req.bits.wayNum),
[warn]                                                                 ^
[warn] src/main/scala/xiangshan/frontend/icache/ICacheBankedArray.scala 296:61: [W004] Dynamic index with width 64 is too wide for Vec of size 4 (expected index width 2).
[warn]     tagArray.io.r.resp.asTypeOf(Vec(nWays, UInt(tagBits.W)))(io.cacheOp.req.bits.wayNum),
[warn]                                                             ^
[warn] rocket-chip/src/main/scala/util/Replacement.scala 391:55: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]   def way(set: UInt) = logic.get_replace_way(state_vec(set))
[warn]                                                       ^
[warn] src/main/scala/xiangshan/frontend/IFU.scala 409:29: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]         result(i) := dataVec(cutPtr(i)) //the max ptr is 3*blockBytes/4-1
[warn]                             ^
[warn] src/main/scala/xiangshan/cache/mmu/Repeater.scala 538:65: [W005] Dynamic index with width 1 is too narrow for Vec of size 4 (expected index width 2).
[warn]   val enqPtrVec = VecInit((0 until Width).map(i => enqPtrVecInit(accumEnqNum(i))))
[warn]                                                                 ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 343:45: [W004] Dynamic index with width 10 is too wide for Vec of size 55 (expected index width 6).
[warn]   val events_incr_0 = RegNext(io.events_sets(io.hpm_event( 9,  0)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 344:45: [W004] Dynamic index with width 10 is too wide for Vec of size 55 (expected index width 6).
[warn]   val events_incr_1 = RegNext(io.events_sets(io.hpm_event(19, 10)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 345:45: [W004] Dynamic index with width 10 is too wide for Vec of size 55 (expected index width 6).
[warn]   val events_incr_2 = RegNext(io.events_sets(io.hpm_event(29, 20)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 346:45: [W004] Dynamic index with width 10 is too wide for Vec of size 55 (expected index width 6).
[warn]   val events_incr_3 = RegNext(io.events_sets(io.hpm_event(39, 30)))
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/rob/Rab.scala 181:72: [W005] Dynamic index with width 1 is too narrow for Vec of size 6 (expected index width 3).
[warn]   val allocatePtrVec = VecInit((0 until RenameWidth).map(i => enqPtrVec(PopCount(realNeedAlloc.take(i))).value))
[warn]                                                                        ^
[warn] src/main/scala/xiangshan/backend/rob/Rab.scala 181:72: [W005] Dynamic index with width 2 is too narrow for Vec of size 6 (expected index width 3).
[warn]   val allocatePtrVec = VecInit((0 until RenameWidth).map(i => enqPtrVec(PopCount(realNeedAlloc.take(i))).value))
[warn]                                                                        ^
[warn] src/main/scala/xiangshan/backend/rob/VTypeBuffer.scala 179:41: [W005] Dynamic index with width 3 is too narrow for Vec of size 9 (expected index width 4).
[warn]   private val deqPtrOHNext = deqPtrOHVec(deqPtrSteps)
[warn]                                         ^
[warn] src/main/scala/xiangshan/backend/rob/VTypeBuffer.scala 184:98: [W005] Dynamic index with width 1 is too narrow for Vec of size 6 (expected index width 3).
[warn]   private val allocPtrVec: Vec[VTypeBufferPtr] = VecInit((0 until RenameWidth).map(i => enqPtrVec(PopCount(needAllocVec.take(i)))))
[warn]                                                                                                  ^
[warn] src/main/scala/xiangshan/backend/rob/VTypeBuffer.scala 184:98: [W005] Dynamic index with width 2 is too narrow for Vec of size 6 (expected index width 3).
[warn]   private val allocPtrVec: Vec[VTypeBufferPtr] = VecInit((0 until RenameWidth).map(i => enqPtrVec(PopCount(needAllocVec.take(i)))))
[warn]                                                                                                  ^
[warn] src/main/scala/xiangshan/backend/rob/Rob.scala 137:72: [W005] Dynamic index with width 1 is too narrow for Vec of size 6 (expected index width 3).
[warn]   val allocatePtrVec = VecInit((0 until RenameWidth).map(i => enqPtrVec(PopCount(io.enq.req.take(i).map(req => req.valid && req.bits.firstUop)))))
[warn]                                                                        ^
[warn] src/main/scala/xiangshan/backend/rob/Rob.scala 137:72: [W005] Dynamic index with width 2 is too narrow for Vec of size 6 (expected index width 3).
[warn]   val allocatePtrVec = VecInit((0 until RenameWidth).map(i => enqPtrVec(PopCount(io.enq.req.take(i).map(req => req.valid && req.bits.firstUop)))))
[warn]                                                                        ^
[warn] src/main/scala/xiangshan/backend/rob/RobDeqPtrWrapper.scala 78:46: [W004] Dynamic index with width 6 is too wide for Vec of size 8 (expected index width 3).
[warn]   val commitCnt = Mux(allowOnlyOne, canCommit(realCommitLast.value), normalCommitCnt)
[warn]                                              ^
[warn] src/main/scala/xiangshan/backend/decode/DecodeUnitComp.scala 1336:15: [W005] Dynamic index with width 4 is too narrow for Vec of size 65 (expected index width 7).
[warn]       csBundle(lmul - 1.U).rfWen := true.B
[warn]               ^
[warn] src/main/scala/xiangshan/backend/decode/DecodeUnitComp.scala 1337:15: [W005] Dynamic index with width 4 is too narrow for Vec of size 65 (expected index width 7).
[warn]       csBundle(lmul - 1.U).fpWen := false.B
[warn]               ^
[warn] src/main/scala/xiangshan/backend/decode/DecodeUnitComp.scala 1338:15: [W005] Dynamic index with width 4 is too narrow for Vec of size 65 (expected index width 7).
[warn]       csBundle(lmul - 1.U).vecWen := false.B
[warn]               ^
[warn] src/main/scala/xiangshan/backend/decode/DecodeUnitComp.scala 1339:15: [W005] Dynamic index with width 4 is too narrow for Vec of size 65 (expected index width 7).
[warn]       csBundle(lmul - 1.U).ldest := dest
[warn]               ^
[warn] src/main/scala/xiangshan/backend/rename/RenameTable.scala 99:62: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]   val t1_rdata_use_t1_raddr = VecInit(t1_raddr.map(spec_table(_)))
[warn]                                                              ^
[warn] src/main/scala/xiangshan/backend/rename/RenameTable.scala 130:22: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]       arch_table_next(w.addr) := w.data
[warn]                      ^
[warn] src/main/scala/xiangshan/backend/rename/RenameTable.scala 134:25: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]       MuxCase(arch_table(w.addr) & arch_mask,
[warn]                         ^
[warn] src/main/scala/xiangshan/backend/rename/RenameTable.scala 158:28: [W004] Dynamic index with width 6 is too wide for Vec of size 32 (expected index width 5).
[warn]         difftest_table_next(w.addr) := w.data
[warn]                            ^
[warn] src/main/scala/xiangshan/backend/rename/freelist/MEFreeList.scala 45:45: [W005] Dynamic index with width 1 is too narrow for Vec of size 7 (expected index width 3).
[warn]     io.allocatePhyReg(i) := phyRegCandidates(PopCount(io.allocateReq.take(i)))
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/rename/freelist/MEFreeList.scala 45:45: [W005] Dynamic index with width 2 is too narrow for Vec of size 7 (expected index width 3).
[warn]     io.allocatePhyReg(i) := phyRegCandidates(PopCount(io.allocateReq.take(i)))
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/rename/freelist/StdFreeList.scala 65:45: [W005] Dynamic index with width 1 is too narrow for Vec of size 7 (expected index width 3).
[warn]     io.allocatePhyReg(i) := phyRegCandidates(PopCount(io.allocateReq.take(i)))
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/rename/freelist/StdFreeList.scala 65:45: [W005] Dynamic index with width 2 is too narrow for Vec of size 7 (expected index width 3).
[warn]     io.allocatePhyReg(i) := phyRegCandidates(PopCount(io.allocateReq.take(i)))
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/dispatch/DispatchQueue.scala 103:58: [W005] Dynamic index with width 1 is too narrow for Vec of size 7 (expected index width 3).
[warn]   val enqIndexOH = (0 until enqnum).map(i => tailPtrOHVec(enqOffset(i)))
[warn]                                                          ^
[warn] src/main/scala/xiangshan/backend/dispatch/DispatchQueue.scala 103:58: [W005] Dynamic index with width 2 is too narrow for Vec of size 7 (expected index width 3).
[warn]   val enqIndexOH = (0 until enqnum).map(i => tailPtrOHVec(enqOffset(i)))
[warn]                                                          ^
[warn] src/main/scala/xiangshan/backend/dispatch/DispatchQueue.scala 121:38: [W005] Dynamic index with width 1 is too narrow for Vec of size 6 (expected index width 3).
[warn]     dataModule.io.waddr(i) := tailPtr(enqOffset(i)).value
[warn]                                      ^
[warn] src/main/scala/xiangshan/backend/dispatch/DispatchQueue.scala 121:38: [W005] Dynamic index with width 2 is too narrow for Vec of size 6 (expected index width 3).
[warn]     dataModule.io.waddr(i) := tailPtr(enqOffset(i)).value
[warn]                                      ^
[warn] src/main/scala/xiangshan/backend/dispatch/DispatchQueue.scala 245:94: [W005] Dynamic index with width 1 is too narrow for Vec of size 6 (expected index width 3).
[warn]     val enqBypassEnVec = io.enq.needAlloc.zip(enqOffset).map{ case (v, o) => v && enqMatchVec(o) }
[warn]                                                                                              ^
[warn] src/main/scala/xiangshan/backend/dispatch/DispatchQueue.scala 245:94: [W005] Dynamic index with width 2 is too narrow for Vec of size 6 (expected index width 3).
[warn]     val enqBypassEnVec = io.enq.needAlloc.zip(enqOffset).map{ case (v, o) => v && enqMatchVec(o) }
[warn]                                                                                              ^
[warn] src/main/scala/xiangshan/mem/mdp/StoreSet.scala 157:18: [W004] Dynamic index with width 11 is too wide for Vec of size 1024 (expected index width 10).
[warn]       debug_valid(resetStepCounter) := false.B
[warn]                  ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 343:45: [W004] Dynamic index with width 10 is too wide for Vec of size 114 (expected index width 7).
[warn]   val events_incr_0 = RegNext(io.events_sets(io.hpm_event( 9,  0)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 344:45: [W004] Dynamic index with width 10 is too wide for Vec of size 114 (expected index width 7).
[warn]   val events_incr_1 = RegNext(io.events_sets(io.hpm_event(19, 10)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 345:45: [W004] Dynamic index with width 10 is too wide for Vec of size 114 (expected index width 7).
[warn]   val events_incr_2 = RegNext(io.events_sets(io.hpm_event(29, 20)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 346:45: [W004] Dynamic index with width 10 is too wide for Vec of size 114 (expected index width 7).
[warn]   val events_incr_3 = RegNext(io.events_sets(io.hpm_event(39, 30)))
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/rename/BusyTable.scala 125:23: [W002] Dynamic index with width 8 is too large for extractee of width 64
[warn]     res.resp := !table(res.req)
[warn]                       ^
[warn] src/main/scala/xiangshan/backend/rename/BusyTable.scala 126:41: [W004] Dynamic index with width 8 is too wide for Vec of size 64 (expected index width 6).
[warn]     res.loadDependency := loadDependency(res.req)
[warn]                                         ^
[warn] src/main/scala/xiangshan/backend/issue/Entries.scala 266:35: [W004] Dynamic index with width 1 is too wide for Vec of size 1 (expected index width 0).
[warn]       val Resp = resps(issueTimer)(deqPortIdx)
[warn]                                   ^
[warn] src/main/scala/xiangshan/backend/fu/Bku.scala 272:29: [W005] Dynamic index with width 2 is too narrow for Vec of size 8 (expected index width 3).
[warn]   val sm4SboxIn  = src2Bytes(func(1,0))
[warn]                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 343:45: [W004] Dynamic index with width 10 is too wide for Vec of size 50 (expected index width 6).
[warn]   val events_incr_0 = RegNext(io.events_sets(io.hpm_event( 9,  0)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 344:45: [W004] Dynamic index with width 10 is too wide for Vec of size 50 (expected index width 6).
[warn]   val events_incr_1 = RegNext(io.events_sets(io.hpm_event(19, 10)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 345:45: [W004] Dynamic index with width 10 is too wide for Vec of size 50 (expected index width 6).
[warn]   val events_incr_2 = RegNext(io.events_sets(io.hpm_event(29, 20)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 346:45: [W004] Dynamic index with width 10 is too wide for Vec of size 50 (expected index width 6).
[warn]   val events_incr_3 = RegNext(io.events_sets(io.hpm_event(39, 30)))
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/fu/CSR.scala 1445:21: [W002] Dynamic index with width 8 is too large for extractee of width 64
[warn]   val delegS = deleg(causeNO(7,0)) && (privilegeMode < ModeM)
[warn]                     ^
[warn] src/main/scala/xiangshan/backend/fu/CSR.scala 1446:45: [W002] Dynamic index with width 8 is too large for extractee of width 64
[warn]   val delegVS = virtMode && delegS && hdeleg(causeNO(7, 0)) && (privilegeMode < ModeM)
[warn]                                             ^
[warn] src/main/scala/xiangshan/backend/fu/wrapper/VIAluFix.scala 217:47: [W004] Dynamic index with width 7 is too wide for Vec of size 8 (expected index width 3).
[warn]   private val maskUsed = splitMask(maskDataVec(maskIdx), Mux(eewVd_is_1b, eewVs1, eewVd))
[warn]                                               ^
[warn] src/main/scala/xiangshan/backend/fu/wrapper/VIAluFix.scala 219:79: [W004] Dynamic index with width 7 is too wide for Vec of size 8 (expected index width 3).
[warn]   private val oldVdUsed = splitMask(VecDataToMaskDataVec(oldVd, vs1Type(1, 0))(vuopIdx), eewVs1)
[warn]                                                                               ^
[warn] yunsuan/src/main/scala/yunsuan/vector/VectorPerm/Permutation.scala 257:48: [W004] Dynamic index with width 5 is too wide for Vec of size 16 (expected index width 4).
[warn]   out_previous_ones_sum := current_uop_ones_sum(elements - 1.U)
[warn]                                                ^
[warn] yunsuan/src/main/scala/yunsuan/vector/VectorPerm/Permutation.scala 718:54: [W004] Dynamic index with width 5 is too wide for Vec of size 16 (expected index width 4).
[warn]         vslide1dn_vd_wo_rs1_reg0(i) := vs1_bytes_reg0(i.U + vsew_bytes_reg0 - vlenb.U)
[warn]                                                      ^
[warn] yunsuan/src/main/scala/yunsuan/vector/VectorALU/VMask.scala 331:33: [W003] Dynamic index with width 1 is too small for extractee of width 128
[warn]     when((!vm_reg && !vmask_bits(i.U >> vsew_reg)) || (i.U >= vlRemainBytes_reg)) {
[warn]                                 ^
[warn] yunsuan/src/main/scala/yunsuan/vector/VectorALU/VMask.scala 331:33: [W003] Dynamic index with width 2 is too small for extractee of width 128
[warn]     when((!vm_reg && !vmask_bits(i.U >> vsew_reg)) || (i.U >= vlRemainBytes_reg)) {
[warn]                                 ^
[warn] yunsuan/src/main/scala/yunsuan/vector/VectorALU/VMask.scala 331:33: [W003] Dynamic index with width 3 is too small for extractee of width 128
[warn]     when((!vm_reg && !vmask_bits(i.U >> vsew_reg)) || (i.U >= vlRemainBytes_reg)) {
[warn]                                 ^
[warn] yunsuan/src/main/scala/yunsuan/vector/VectorALU/VMask.scala 331:33: [W003] Dynamic index with width 4 is too small for extractee of width 128
[warn]     when((!vm_reg && !vmask_bits(i.U >> vsew_reg)) || (i.U >= vlRemainBytes_reg)) {
[warn]                                 ^
[warn] src/main/scala/xiangshan/mem/prefetch/FDP.scala 96:29: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     val allocPtr = enqPtrExt(index)
[warn]                             ^
[warn] src/main/scala/xiangshan/cache/wpu/WPU.scala 130:55: [W004] Dynamic index with width 29 is too wide for Vec of size 8 (expected index width 3).
[warn]       pred.way_en := UIntToOH(predict_regs(predSetIdx)(predTagIdx))
[warn]                                                       ^
[warn] src/main/scala/xiangshan/cache/wpu/WPU.scala 120:30: [W004] Dynamic index with width 29 is too wide for Vec of size 8 (expected index width 3).
[warn]       predict_regs(updSetIdx)(updTagIdx) := OHToUInt(upd.way_en)
[warn]                              ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 55:57: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]     io.pred(i).way_conflict := io.pred(i).en & PredTable(get_addr_idx(io.pred(i).vaddr))(CounterSize-1)
[warn]                                                         ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 58:21: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]       when(PredTable(get_addr_idx(io.update(i).vaddr)) === Fill(CounterSize, 1.U)) {
[warn]                     ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 59:18: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr))
[warn]                  ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 59:65: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr))
[warn]                                                                 ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 61:18: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr)) + 1.U
[warn]                  ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 61:65: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr)) + 1.U
[warn]                                                                 ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 64:21: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]       when(PredTable(get_addr_idx(io.update(i).vaddr)) === Fill(CounterSize, 0.U)) {
[warn]                     ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 65:18: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr))
[warn]                  ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 65:65: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr))
[warn]                                                                 ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 67:18: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr)) - 1.U
[warn]                  ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 67:65: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]         PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr)) - 1.U
[warn]                                                                 ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 70:16: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]       PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr))
[warn]                ^
[warn] src/main/scala/xiangshan/cache/wpu/VictimList.scala 70:63: [W004] Dynamic index with width 7 is too wide for Vec of size 64 (expected index width 6).
[warn]       PredTable(get_addr_idx(io.update(i).vaddr)) := PredTable(get_addr_idx(io.update(i).vaddr))
[warn]                                                               ^
[warn] src/main/scala/xiangshan/mem/vector/VSFlowQueue.scala 671:24: [W004] Dynamic index with width 16 is too wide for Vec of size 32 (expected index width 5).
[warn]         dataSecondQueue(dataFirstQueue(thisPtr).data),
[warn]                        ^
[warn] src/main/scala/xiangshan/mem/vector/VSFlowQueue.scala 769:34: [W004] Dynamic index with width 16 is too wide for Vec of size 32 (expected index width 5).
[warn]       thisData := dataSecondQueue(dataFirstQueue(thisPtr).data)
[warn]                                  ^
[warn] src/main/scala/xiangshan/mem/lsqueue/LoadQueueRAR.scala 119:44: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     val canAccept = freeList.io.canAllocate(offset)
[warn]                                            ^
[warn] src/main/scala/xiangshan/mem/lsqueue/LoadQueueRAR.scala 120:44: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     val enqIndex = freeList.io.allocateSlot(offset)
[warn]                                            ^
[warn] src/main/scala/xiangshan/mem/lsqueue/LoadQueueRAW.scala 131:44: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     val canAccept = freeList.io.canAllocate(offset)
[warn]                                            ^
[warn] src/main/scala/xiangshan/mem/lsqueue/LoadQueueRAW.scala 132:44: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     val enqIndex = freeList.io.allocateSlot(offset)
[warn]                                            ^
[warn] src/main/scala/xiangshan/mem/lsqueue/LoadQueueReplay.scala 582:44: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     val canAccept = freeList.io.canAllocate(offset)
[warn]                                            ^
[warn] src/main/scala/xiangshan/mem/lsqueue/LoadQueueReplay.scala 583:92: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     val enqIndex = Mux(enq.bits.isLoadReplay, enq.bits.schedIndex, freeList.io.allocateSlot(offset))
[warn]                                                                                            ^
[warn] src/main/scala/xiangshan/mem/lsqueue/VirtualLoadQueue.scala 149:26: [W005] Dynamic index with width 1 is too narrow for Vec of size 6 (expected index width 3).
[warn]     val lqIdx = enqPtrExt(offset)
[warn]                          ^
[warn] src/main/scala/xiangshan/mem/lsqueue/VirtualLoadQueue.scala 149:26: [W005] Dynamic index with width 2 is too narrow for Vec of size 6 (expected index width 3).
[warn]     val lqIdx = enqPtrExt(offset)
[warn]                          ^
[warn] src/main/scala/xiangshan/mem/lsqueue/UncacheBuffer.scala 327:47: [W005] Dynamic index with width 1 is too narrow for Vec of size 3 (expected index width 2).
[warn]     enqIndexVec(w) := freeList.io.allocateSlot(offset)
[warn]                                               ^
[warn] src/main/scala/xiangshan/mem/lsqueue/StoreQueue.scala 230:26: [W005] Dynamic index with width 1 is too narrow for Vec of size 6 (expected index width 3).
[warn]     val sqIdx = enqPtrExt(offset)
[warn]                          ^
[warn] src/main/scala/xiangshan/mem/lsqueue/StoreQueue.scala 230:26: [W005] Dynamic index with width 2 is too narrow for Vec of size 6 (expected index width 3).
[warn]     val sqIdx = enqPtrExt(offset)
[warn]                          ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 697:15: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]       stateVec(dcache_resp_id).state_inflight := false.B
[warn]               ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 698:15: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]       stateVec(dcache_resp_id).state_valid := false.B
[warn]               ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 701:22: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]       assert(stateVec(dcache_resp_id).state_inflight === true.B)
[warn]                      ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 729:21: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]     missqReplayCount(replay_resp_id) := 0.U
[warn]                     ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 730:13: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]     stateVec(replay_resp_id).w_timeout := true.B
[warn]             ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 733:20: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]     assert(stateVec(replay_resp_id).state_inflight === true.B)
[warn]                    ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 754:38: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]       difftest.addr   := getAddr(ptag(dcache_resp_id))
[warn]                                      ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 755:30: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]       difftest.data   := data(dcache_resp_id).asTypeOf(Vec(CacheLineBytes, UInt(8.W)))
[warn]                              ^
[warn] src/main/scala/xiangshan/mem/sbuffer/Sbuffer.scala 756:30: [W004] Dynamic index with width 4 is too wide for Vec of size 4 (expected index width 2).
[warn]       difftest.mask   := mask(dcache_resp_id).asUInt
[warn]                              ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 343:45: [W004] Dynamic index with width 10 is too wide for Vec of size 126 (expected index width 7).
[warn]   val events_incr_0 = RegNext(io.events_sets(io.hpm_event( 9,  0)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 344:45: [W004] Dynamic index with width 10 is too wide for Vec of size 126 (expected index width 7).
[warn]   val events_incr_1 = RegNext(io.events_sets(io.hpm_event(19, 10)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 345:45: [W004] Dynamic index with width 10 is too wide for Vec of size 126 (expected index width 7).
[warn]   val events_incr_2 = RegNext(io.events_sets(io.hpm_event(29, 20)))
[warn]                                             ^
[warn] src/main/scala/utils/PerfCounterUtils.scala 346:45: [W004] Dynamic index with width 10 is too wide for Vec of size 126 (expected index width 7).
[warn]   val events_incr_3 = RegNext(io.events_sets(io.hpm_event(39, 30)))
[warn]                                             ^
[warn] coupledL2/src/main/scala/coupledL2/SourceB.scala 115:36: [W004] Dynamic index with width 5 is too wide for Vec of size 16 (expected index width 4).
[warn]     when(p.valid && !io.grantStatus(p.waitG).valid) {
[warn]                                    ^
[warn] coupledL2/src/main/scala/coupledL2/GrantBuffer.scala 268:18: [W004] Dynamic index with width 8 is too wide for Vec of size 16 (expected index width 4).
[warn]     inflightGrant(io.e.bits.sink).valid := false.B
[warn]                  ^
[warn] coupledL2/src/main/scala/coupledL2/MSHRBuffer.scala 61:25: [W004] Dynamic index with width 8 is too wide for Vec of size 16 (expected index width 4).
[warn]   io.resp.data := buffer(ridReg)
[warn]                         ^
[warn] huancun/src/main/scala/huancun/SinkA.scala 118:32: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]   io.d_pb_pop.ready := beatVals(io.d_pb_pop.bits.bufIdx)(io.d_pb_pop.bits.count)
[warn]                                ^
[warn] huancun/src/main/scala/huancun/SinkA.scala 119:38: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]   io.d_pb_beat := RegEnable(putBuffer(io.d_pb_pop.bits.bufIdx)(io.d_pb_pop.bits.count), io.d_pb_pop.fire)
[warn]                                      ^
[warn] huancun/src/main/scala/huancun/SinkA.scala 121:13: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]     beatVals(io.d_pb_pop.bits.bufIdx).foreach(_ := false.B)
[warn]             ^
[warn] huancun/src/main/scala/huancun/SinkA.scala 124:32: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]   io.a_pb_pop.ready := beatVals(io.a_pb_pop.bits.bufIdx)(io.a_pb_pop.bits.count)
[warn]                                ^
[warn] huancun/src/main/scala/huancun/SinkA.scala 125:38: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]   io.a_pb_beat := RegEnable(putBuffer(io.a_pb_pop.bits.bufIdx)(io.a_pb_pop.bits.count), io.a_pb_pop.fire)
[warn]                                      ^
[warn] huancun/src/main/scala/huancun/SinkA.scala 127:13: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]     beatVals(io.a_pb_pop.bits.bufIdx).foreach(_ := false.B)
[warn]             ^
[warn] huancun/src/main/scala/huancun/RefillBuffer.scala 45:20: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]   r.ready := valids(r.id)(r.beat)
[warn]                    ^
[warn] huancun/src/main/scala/huancun/RefillBuffer.scala 53:11: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]     valids(r.id).foreach(_ := false.B)
[warn]           ^
[warn] huancun/src/main/scala/huancun/RefillBuffer.scala 66:19: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]     assert(!valids(w.id)(w.beat), "[%d] attempt to write a valid entry", w.id)
[warn]                   ^
[warn] huancun/src/main/scala/huancun/RefillBuffer.scala 67:11: [W004] Dynamic index with width 4 is too wide for Vec of size 7 (expected index width 3).
[warn]     valids(w.id)(w.beat) := true.B
[warn]           ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 99:37: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]     isToN(req.param) && clients_meta(iam).state =/= INVALID || isToB(req.param) && isT(clients_meta(iam).state)
[warn]                                     ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 99:100: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]     isToN(req.param) && clients_meta(iam).state =/= INVALID || isToB(req.param) && isT(clients_meta(iam).state)
[warn]                                                                                                    ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 110:37: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]   val req_client_meta = clients_meta(iam)
[warn]                                     ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 159:85: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]           req.param === PREFETCH_READ && meta.hit && !self_meta.hit && !clients_meta(iam).hit)
[warn]                                                                                     ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 475:80: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]   assert(RegNext(!meta_valid || !req.fromC || req.fromCmoHelper || clients_meta(iam).hit),
[warn]                                                                                ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 808:25: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]       when(!clients_meta(iam).hit) {
[warn]                         ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 978:53: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]   val client_dir_error = req_acquire && clients_meta(iam).hit &&
[warn]                                                     ^
[warn] huancun/src/main/scala/huancun/noninclusive/MSHR.scala 979:40: [W004] Dynamic index with width 2 is too wide for Vec of size 1 (expected index width 0).
[warn]     (growFrom(req.param) < clients_meta(iam).state)
[warn]                                        ^
[warn] src/main/scala/device/AXI4IntrGenerator.scala 55:18: [W005] Dynamic index with width 1 is too narrow for Vec of size 8 (expected index width 3).
[warn]       intrGenRegs(randomPosition(5)) := intrReg(randomPosition(5)) | UIntToOH(randomPosition(4, 0))
[warn]                  ^
[warn] There were 126 warning(s) during hardware elaboration.
(List(int),IntRange(0,2))
(List(int),IntRange(0,1))
(List(int),IntRange(0,1))
(List(int),IntRange(0,1))
./scripts/split_verilog.sh ./build/rtl SimTop.v
./scripts/gen_sep_mem.sh "./scripts/vlsi_mem_gen" "./build/rtl/SimTop.v.conf" "./build/rtl"
sed -i -e 's/_\(aw\|ar\|w\|r\|b\)_\(\|bits_\)/_\1/g' build/rtl/SimTop.v
sed -i -e 's/$fatal/xs_assert(`__LINE__)/g' ./build/rtl/SimTop.v
sed -i -e "s/\$error(/\$fwrite(32\'h80000002, /g" ./build/rtl/SimTop.v
make -C ./difftest emu SIM_TOP=SimTop DESIGN_DIR=/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan NUM_CORES=1
make[1]: Entering directory '/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest'
Mon, 20 May 2024 17:00:43 +0800
time -a -o /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/time.log verilator --exe --cc -O3 --top-module SimTop +define+VERILATOR=1 +define+PRINTF_COND=1 +define+RANDOMIZE_REG_INIT +define+RANDOMIZE_MEM_INIT +define+RANDOMIZE_GARBAGE_ASSIGN +define+RANDOMIZE_DELAY=0 -Wno-STMTDLY -Wno-WIDTH --max-num-width 150000 --assert --x-assign unique --output-split 30000 --output-split-cfuncs 30000 -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/rtl -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/generated-src -CFLAGS "-I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/config -DNOOP_HOME=\\\"/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan\\\" -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/generated-src -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/plugin/include -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/difftest -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build -DENABLE_CHISEL_DB -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build -DENABLE_CONSTANTIN -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/plugin/spikedasm -I/nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/verilator -DVERILATOR -DNUM_CORES=1 --std=c++17 -DVERILATOR_4_210 -DENABLE_FST -DEMU_THREAD=16" -LDFLAGS "-lsqlite3 -lz -lzstd -ldl" -o /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/emu +define+DIFFTEST --instr-count-dpi 1 --trace-fst --threads 16 --threads-dpi all -Mdir /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/emu-compile /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/rtl/SimTop.v /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/vsrc/common/ref.v /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/vsrc/common/assert.v /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/vsrc/common/SimJTAG.v /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/uart.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/main.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/compress.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/common.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/golden.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/flash.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/coverage.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/lightsss.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/device.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/keyboard.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/dut.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/ram.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/SimJTAG.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/vga.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/remote_bitbang.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/perf.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/common/sdcard.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/generated-src/difftest-dpic.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/difftest/difftrace.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/difftest/difftest.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/difftest/refproxy.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/difftest/goldenmem.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/chisel_db.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/build/constantin.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/plugin/spikedasm/spikedasm.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/verilator/snapshot.cpp /nfs/home/zhangruisi/myXiangShan5/xs-env/XiangShan/difftest/src/test/csrc/verilator/emu.cpp
